{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":448,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":79,\"hacking_chance_mult\":1.3976826605528296,\"hacking_speed_mult\":1.3976826605528296,\"hacking_money_mult\":1.3976826605528296,\"hacking_grow_mult\":1.3976826605528296,\"hacking_exp\":145512645.93027264,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":5749.66,\"hacking_mult\":1.3976826605528296,\"strength_mult\":1.2941506116229904,\"defense_mult\":1.2941506116229904,\"dexterity_mult\":1.2941506116229904,\"agility_mult\":1.2941506116229904,\"charisma_mult\":1.2941506116229904,\"hacking_exp_mult\":1.3976826605528296,\"strength_exp_mult\":1.2941506116229904,\"defense_exp_mult\":1.2941506116229904,\"dexterity_exp_mult\":1.2941506116229904,\"agility_exp_mult\":1.2941506116229904,\"charisma_exp_mult\":1.2941506116229904,\"company_rep_mult\":1.2941506116229904,\"faction_rep_mult\":1.2941506116229904,\"money\":4094519716.6964974,\"city\":\"New Tokyo\",\"location\":\"VitaLife\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":260403.60000394357,\"ram\":64,\"totalMoneyGenerated\":1770708515.1415627,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":259803.6000039523,\"ram\":64,\"totalMoneyGenerated\":1768788169.1335716,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":259203.40000396103,\"ram\":64,\"totalMoneyGenerated\":1753396632.5227385,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":258303.20000397472,\"ram\":64,\"totalMoneyGenerated\":1750929444.5341787,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":257253.00000397567,\"ram\":64,\"totalMoneyGenerated\":1746716133.0442913,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":256952.80000397595,\"ram\":64,\"totalMoneyGenerated\":1744931862.711679,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":256202.60000397664,\"ram\":64,\"totalMoneyGenerated\":1743146485.878513,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":255002.20000397772,\"ram\":64,\"totalMoneyGenerated\":1741315599.5377517,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":254852.20000397786,\"ram\":64,\"totalMoneyGenerated\":1739464292.2260256,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":254702.200003978,\"ram\":64,\"totalMoneyGenerated\":1737103685.5131724,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":254552.20000397813,\"ram\":64,\"totalMoneyGenerated\":1734013465.1862388,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":254402.0000039783,\"ram\":64,\"totalMoneyGenerated\":1731809716.3373141,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":254252.0000039784,\"ram\":64,\"totalMoneyGenerated\":1711681865.3842552,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":254102.00000397855,\"ram\":64,\"totalMoneyGenerated\":1705438958.4361038,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":253952.0000039787,\"ram\":64,\"totalMoneyGenerated\":1700369308.0839174,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":253802.0000039788,\"ram\":64,\"totalMoneyGenerated\":1698587990.7796202,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":253652.00000397896,\"ram\":64,\"totalMoneyGenerated\":1696807311.8337362,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":253351.8000039792,\"ram\":64,\"totalMoneyGenerated\":1695026379.790236,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":252451.60000398007,\"ram\":64,\"totalMoneyGenerated\":1693243913.1636333,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":233300.60000341275,\"ram\":64,\"totalMoneyGenerated\":1690355959.6048388,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":233150.60000340198,\"ram\":64,\"totalMoneyGenerated\":1688575217.2985504,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":229549.80000318444,\"ram\":64,\"totalMoneyGenerated\":1686654883.0382197,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":198941.6000014522,\"ram\":64,\"totalMoneyGenerated\":1681477262.483731,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":194959.60000114798,\"ram\":64,\"totalMoneyGenerated\":1674088691.07449,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":183105.60000096948,\"ram\":64,\"totalMoneyGenerated\":1656070950.5099921,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":173651.6000010116,\"ram\":64,\"totalMoneyGenerated\":1623387438.4711215,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":114536.19999934034,\"ram\":64,\"totalMoneyGenerated\":1258165020.3892992,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":79187.59999960988,\"ram\":64,\"totalMoneyGenerated\":918442605.2766455,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11869.05542696414,\"onlineTimeSeconds\":60733.79999959712,\"ram\":64,\"totalMoneyGenerated\":329857178.617113,\"name\":\"hacknet-node-28\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.2941506116229904,\"crime_success_mult\":1.2941506116229904,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.2941506116229904,\"hacknet_node_money_mult\":1.2941506116229904,\"hacknet_node_purchase_cost_mult\":0.7121194814372677,\"hacknet_node_ram_cost_mult\":0.7121194814372677,\"hacknet_node_core_cost_mult\":0.7121194814372677,\"hacknet_node_level_cost_mult\":0.7121194814372677,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":2,\"entropy\":0,\"lastUpdate\":1659339630495,\"lastSave\":1659339580309,\"totalPlaytime\":5770813000,\"playtimeSinceLastAug\":260512000,\"playtimeSinceLastBitnode\":260512000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":68894794376.35997,\"hacknet\":47070554946.97788,\"hacknet_expenses\":-55354566794.23282,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":4094518696.6964974,\"work\":0,\"servers\":-43867307967.99999,\"other\":-200000,\"augmentations\":-12648755850.889997}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":68894794376.35997,\"hacknet\":47070554946.97788,\"hacknet_expenses\":-55354566794.23282,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":4094518696.6964974,\"work\":0,\"servers\":-43867307967.99999,\"other\":-200000,\"augmentations\":-12648755850.889997}},\"scriptProdSinceLastAug\":58676711232.897,\"exploits\":[\"N00dles\",\"Bypass\",\"UndocumentedFunctionCall\",\"PrototypeTampering\",\"YoureNotMeantToAccessThis\",\"Unclickable\",\"TimeCompression\",\"RealityAlteration\",\"EditSaveFile\",\"INeedARainbow\",\"TrueRecursion\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1653655398588},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1653655458584},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1653659557826},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1653659797823},{\"ID\":\"TOR\",\"unlockedOn\":1653659977826},{\"ID\":\"FROZE\",\"unlockedOn\":1653660460129},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1653696645635},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1653698625642},{\"ID\":\"NITESEC\",\"unlockedOn\":1653731913627},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1653735045303},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1653745720216},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1653781310429},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1653782090441},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1653783574889},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1653783574903},{\"ID\":\"4S\",\"unlockedOn\":1653826362951},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1653916804565},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1653959638301},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1654091552814},{\"ID\":\"DONATION\",\"unlockedOn\":1654213304315},{\"ID\":\"TRAVEL\",\"unlockedOn\":1654213304322},{\"ID\":\"WORKOUT\",\"unlockedOn\":1654213557034},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1654220512573},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1654390064966},{\"ID\":\"SF1.1\",\"unlockedOn\":1654566480259},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1654997963521},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1658472360099},{\"ID\":\"N00DLES\",\"unlockedOn\":1659017057053},{\"ID\":\"BYPASS\",\"unlockedOn\":1659017297054},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1659017357055},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1659017477056},{\"ID\":\"DEVMENU\",\"unlockedOn\":1659018152423},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1659018212429},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1659018272430},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1659018512440},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1659018512443},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1659054070062},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1659054670062},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1659054670064},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1659054670066},{\"ID\":\"FAST_BN\",\"unlockedOn\":1659055689072},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1659055689074},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1659062374881},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1659062978894},{\"ID\":\"RAINBOW\",\"unlockedOn\":1659065018895},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1659078458902},{\"ID\":\"SF5.1\",\"unlockedOn\":1659079118908},{\"ID\":\"TRUE_RECURSION\",\"unlockedOn\":1659225006090}],\"terminalCommandHistory\":[\"run manual/exploit/unachievable.js\",\"run manual/exploit/alterReality.js\",\"run manual/exploit/editSaveFile.js\",\"run build/main.js\",\"vim manual/exploit/rainbow.js\",\"run manual/exploit/rainbow.js\",\"run build/exec/serverMap.js\",\"home;connect iron-gym;connect CSEC; backdoor\",\"home\",\"vim build/pserver/purchasePServer.js\",\"vim build/main.js\",\"run build/main.js\",\"run build/exec/serverMap.js\",\"home;connect iron-gym;connect CSEC;connect neo-net;connect avmnite-02h\",\"home\",\"ls\",\"run build/main.js\",\"run build/exec/serverMap.js\",\"home;connect joesguns;connect CSEC\",\"analyz\",\"analyze\",\"home\",\"run build/exec/serverMap.js\",\"home;connect joesguns;connect CSEC;connect phantasy; home\",\"run build/exec/serverMap.js\",\"home;connect joesguns;connect CSEC\",\"backdoor\",\"home\",\"ls\",\"run build/exec/serverMap.js\",\"vim build/pserver/upgradePServer.js\",\"run build/exec/serverMap.js\",\"home;connect joesguns;connect CSEC;connect phantasy;connect avmnite-02h; backdoor\",\"home\",\"vim build/pserver/upgradePServer.js\",\"run build/main.js\",\"vim build/main.js\",\"run build/main.js\",\"run build/exec/serverMap.js\",\"ls\",\"run build/exec/serverMap.js\",\"home;connect joesguns;connect CSEC;connect phantasy;connect avmnite-02h; backdoor\",\"home\",\"run build/exec/serverMap.js\",\"ls\",\"run build/exec/serverMap.js\",\"home;connect joesguns;connect CSEC;connect phantasy;connect avmnite-02h;connect I.I.I.I; backdoor\",\"home\",\"alias main=\\\"run build/main.js\\\"\",\"kill\"],\"identifier\":\"6ddc899480042\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"79.8.0.7\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\"],\"ramUsed\":16.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/build/main.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":79454.827,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119356.40999882425,\"pid\":1,\"ramUsage\":11.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"blob:file:///e883336f-fd3e-48b3-90c7-4d03c0ad4ef4\",\"moduleSequenceNumber\":131},{\"filename\":\"/build/util/resourceMan.js\",\"url\":\"blob:file:///5f4e4075-0984-46a0-b572-7930cba13b24\",\"moduleSequenceNumber\":143},{\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"blob:file:///1debe746-f014-48d7-a2e3-a9304cb94a80\",\"moduleSequenceNumber\":131},{\"filename\":\"/build/util/nuke.js\",\"url\":\"blob:file:///4fa68aab-0bee-4d43-95fc-515d7b766448\",\"moduleSequenceNumber\":128},{\"filename\":\"/build/util/scan.js\",\"url\":\"blob:file:///47bcc9b9-bd42-4c9c-8816-4dc55049012c\",\"moduleSequenceNumber\":129},{\"filename\":\"/build/main.js\",\"url\":\"blob:file:///279aef27-bece-4d2d-b377-37d44cce3e13\",\"moduleSequenceNumber\":221}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[612232,10,46,40]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2334.6891161874496,\"onlineMoneyMade\":612232,\"onlineRunningTime\":28988.6100000704,\"pid\":104,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":2,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///cb5f30ea-4e99-4513-ace7-d2b3c081ef7b\",\"moduleSequenceNumber\":222}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Array of all servers that don't need any ports opened\\r\\n    // to gain root access. These have 16 GB of RAM\\r\\n    var servers0Port = [\\\"sigma-cosmetics\\\",\\r\\n        \\\"joesguns\\\",\\r\\n        \\\"nectar-net\\\",\\r\\n        \\\"hong-fang-tea\\\",\\r\\n        \\\"harakiri-sushi\\\",\\r\\n        \\\"foodnstuff\\\"];\\r\\n\\r\\n    // Array of all servers that only need 1 port opened\\r\\n    // to gain root access. These have 32 GB of RAM\\r\\n    var servers1Port = [\\\"neo-net\\\",\\r\\n        \\\"zer0\\\",\\r\\n        \\\"max-hardware\\\",\\r\\n        \\\"iron-gym\\\"];\\r\\n\\r\\n    // Array of all servers that need 2 ports opened \\r\\n    // to gain root access. These have * GB of RAM\\r\\n    var servers2Port = [\\\"phantasy\\\",\\r\\n        \\\"omega-net\\\", \\\"silver-helix\\\",\\r\\n        \\\"avmnite-02h\\\", \\\"the-hub\\\"]\\r\\n\\r\\n    // Array of all servers that need 3 ports opened\\r\\n    // to gain root access. These have * GB of RAM\\r\\n    var servers3Port = [\\\"netlink\\\",\\r\\n        \\\"catalyst\\\", \\\"I.I.I.I\\\",\\r\\n        \\\"rothman-uni\\\", \\\"summit-uni\\\",\\r\\n        \\\"rho-construction\\\", \\\"millenium-fitness\\\"]\\r\\n\\r\\n    // Array of all servers that need 4 ports opened\\r\\n    // to gain root access. These have * GB of RAM\\r\\n    var servers4Port = [\\\"lexo-corp\\\",\\r\\n        \\\"aevum-police\\\", \\\"unitalife\\\",\\r\\n        \\\"alpha-ent\\\", \\\"univ-energy\\\",\\r\\n        \\\"global-pharm\\\", \\\"run4theh111z\\\",\\r\\n        \\\".\\\"]\\r\\n\\r\\n    // Array of all servers that need 5 ports opened\\r\\n    // to gain root access. These have * GB of RAM\\r\\n    var servers5Port = [\\\"zb-institute\\\",\\r\\n        \\\"omnia\\\", \\\"solaris\\\",\\r\\n        \\\"fulcrumtech\\\", \\\"microdyne\\\",\\r\\n        \\\"blade\\\", \\\"powerhouse-fitness\\\",\\r\\n        \\\"omnitek\\\", \\\"helios\\\",\\r\\n        \\\"vitalife\\\", \\\"titan-labs\\\"]\\r\\n\\r\\n    // Array of servers purchased from store\\r\\n    if (ns.serverExists(\\\"pserv-0\\\")) {\\r\\n        //var selfserverram = ns.getServerMaxRam(\\\"pserv-0\\\")\\r\\n        var selfserversPort = ns.getPurchasedServers()\\r\\n    }\\r\\n\\r\\n    // Define home ram size to use for hacking\\r\\n    var homeram = ns.getServerMaxRam(\\\"home\\\")\\r\\n\\r\\n    // Define scripts to use to target best possible company server\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"alpha-ent\\\")) {\\r\\n        // Hacking skill = 551\\r\\n        var latest_script = \\\"/manual/generic_hack/aevum-police.js\\\"\\r\\n        var home_latest_script = \\\"/manual/generic_hack/alpha-ent.js\\\"\\r\\n    } else if (ns.fileExists(\\\"relaySMTP.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"catalyst\\\")) {\\r\\n        // Hacking skill = 410\\r\\n        var latest_script = \\\"/manual/generic_hack/computek.js\\\"\\r\\n        var home_latest_script = \\\"/manual/generic_hack/catalyst.js\\\"\\r\\n    } else if (ns.fileExists(\\\"FTPCrack.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"omega-net\\\")) {\\r\\n        // Hacking skill = 180\\r\\n        var latest_script = \\\"/manual/generic_hack/omega-net.js\\\"\\r\\n        var home_latest_script = \\\"/manual/generic_hack/silver-helix.js\\\"\\r\\n    } else if (ns.fileExists(\\\"BruteSSH.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"iron-gym\\\")) {\\r\\n        // Hacking skill = 100\\r\\n        var latest_script = \\\"/manual/generic_hack/joesguns.js\\\"\\r\\n        var home_latest_script = \\\"/manual/generic_hack/iron-gym.js\\\"\\r\\n    } else {\\r\\n        var latest_script = \\\"/manual/generic_hack/n00dles.js\\\"\\r\\n        var home_latest_script = \\\"/manual/generic_hack/foodnstuff.js\\\"\\r\\n    }\\r\\n\\r\\n    // Copy our scripts onto each server that requires 0 ports\\r\\n    // to gain root access. Then use nuke() to gain admin access and\\r\\n    // run the scripts.\\r\\n    for (var i = 0; i < servers0Port.length; ++i) {\\r\\n        var serv = servers0Port[i];\\r\\n\\r\\n        await ns.scp(latest_script, serv);\\r\\n        ns.nuke(serv);\\r\\n        ns.exec(latest_script, serv, 6);\\r\\n    }\\r\\n    \\r\\n    ns.run(home_latest_script, Math.floor(homeram/2.6) - 5);\\r\\n\\r\\n    if (ns.serverExists(\\\"pserv-0\\\")) {\\r\\n        for (var i = 0; i < selfserversPort.length; ++i) {\\r\\n            var serv = selfserversPort[i];\\r\\n            var servRam = ns.getServerMaxRam(serv);\\r\\n\\r\\n            await ns.scp(latest_script, serv);\\r\\n            ns.nuke(serv);\\r\\n            ns.exec(latest_script, serv, Math.floor(servRam/2.6));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n        // Copy our scripts onto each server that requires 1 port\\r\\n        // to gain root access. Then use brutessh() and nuke()\\r\\n        // to gain admin access and run the scripts.\\r\\n        for (var i = 0; i < servers1Port.length; ++i) {\\r\\n            var serv = servers1Port[i];\\r\\n\\r\\n            await ns.scp(latest_script, serv);\\r\\n            ns.brutessh(serv);\\r\\n            ns.nuke(serv);\\r\\n            ns.exec(latest_script, serv, 12);\\r\\n        }\\r\\n\\r\\n        // Copy our scripts onto each server that requires 2 port\\r\\n        // to gain root access. Then use brutessh(), ftpcrack() and nuke()\\r\\n        // to gain admin access and run the scripts.\\r\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            for (var i = 0; i < servers2Port.length; ++i) {\\r\\n                var serv = servers2Port[i];\\r\\n                var servRam = ns.getServerMaxRam(serv);\\r\\n\\r\\n                await ns.scp(latest_script, serv);\\r\\n                ns.brutessh(serv);\\r\\n                ns.ftpcrack(serv);\\r\\n                ns.nuke(serv);\\r\\n                ns.exec(latest_script, serv, Math.floor(servRam/2.6));\\r\\n            }\\r\\n\\r\\n            if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n                for (var i = 0; i < servers3Port.length; ++i) {\\r\\n                    var serv = servers3Port[i];\\r\\n                    var servRam = ns.getServerMaxRam(serv);\\r\\n\\r\\n                    await ns.scp(latest_script, serv);\\r\\n                    ns.brutessh(serv);\\r\\n                    ns.ftpcrack(serv);\\r\\n                    ns.relaysmtp(serv);\\r\\n                    ns.nuke(serv);\\r\\n                    ns.exec(latest_script, serv, Math.floor(servRam/2.6));\\r\\n                }\\r\\n                if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n                    for (var i = 0; i < servers4Port.length; ++i) {\\r\\n                        var serv = servers4Port[i];\\r\\n                        var servRam = ns.getServerMaxRam(serv);\\r\\n\\r\\n                        await ns.scp(latest_script, serv);\\r\\n                        ns.brutessh(serv);\\r\\n                        ns.ftpcrack(serv);\\r\\n                        ns.relaysmtp(serv);\\r\\n                        ns.httpworm(serv);\\r\\n                        ns.nuke(serv);\\r\\n                        ns.exec(latest_script, serv, Math.floor(servRam/2.6));\\r\\n                    }\\r\\n                    if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n                        for (var i = 0; i < servers5Port.length; ++i) {\\r\\n                            var serv = servers5Port[i];\\r\\n                            var servRam = ns.getServerMaxRam(serv);\\r\\n\\r\\n                            await ns.scp(latest_script, serv);\\r\\n                            ns.brutessh(serv);\\r\\n                            ns.ftpcrack(serv);\\r\\n                            ns.relaysmtp(serv);\\r\\n                            ns.httpworm(serv);\\r\\n                            ns.sqlinject(serv);\\r\\n                            ns.nuke(serv);\\r\\n                            ns.exec(latest_script, serv, Math.floor(servRam/2.6));\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/manual/startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/startup.js\",\"url\":\"blob:file:///2453629a-e043-4a22-b222-30e8b408a271\",\"moduleSequenceNumber\":19150}],\"dependents\":[],\"ramUsage\":7.9,\"server\":\"home\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"aevum-police\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.ftpcrack(target);\\r\\n\\tns.relaysmtp(target);\\r\\n\\tns.httpworm(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/aevum-police.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"alpha-ent\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.ftpcrack(target);\\r\\n\\tns.relaysmtp(target);\\r\\n\\tns.httpworm(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/alpha-ent.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"omega-net\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.ftpcrack(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/omega-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"silver-helix\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.ftpcrack(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/silver-helix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"n00dles\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"joesguns\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tns.brutessh(target);\\r\\n\\t}\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/joesguns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"iron-gym\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/iron-gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"foodnstuff\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/foodnstuff.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/generic_hack/foodnstuff.js\",\"url\":\"blob:file:///0a51e8ba-86a8-4cf9-a332-7a3fdecdf893\",\"moduleSequenceNumber\":83}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"computek\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.ftpcrack(target);\\r\\n\\tns.relaysmtp(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/computek.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t//var target         = ns.args[0];\\r\\n\\tvar target         = \\\"catalyst\\\";\\r\\n\\tvar moneyThresh    = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\tns.brutessh(target);\\r\\n\\tns.ftpcrack(target);\\r\\n\\tns.relaysmtp(target);\\r\\n\\tns.nuke(target);\\r\\n\\r\\n\\twhile(true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/manual/generic_hack/catalyst.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/generic_hack/catalyst.js\",\"url\":\"blob:file:///615c4e72-4348-462b-9850-123622593805\",\"moduleSequenceNumber\":16057}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB as default.\\r\\n    var ram = 16;\\r\\n\\r\\n    // Iterator we'll use for our loop\\r\\n    // Check if servers exist to determine start iterator\\r\\n    var i = 0;\\r\\n    var checked = 0;\\r\\n    while (i < ns.getPurchasedServerLimit() && checked == 0) {\\r\\n        var server_name = \\\"pserv-\\\" + i\\r\\n        if (ns.serverExists(server_name)) {\\r\\n            i++\\r\\n        } else {\\r\\n            checked = 1\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Define scripts to use to target best possible company server\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"aevum-police\\\")) {\\r\\n        // Hacking skill = 406\\r\\n        var latest_script = \\\"/manual/generic_hack/aevum-police.js\\\"\\r\\n    } else if (ns.fileExists(\\\"relaySMTP.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"computek\\\")) {\\r\\n        // Hacking skill = 392\\r\\n        var latest_script = \\\"/manual/generic_hack/computek.js\\\"\\r\\n    } else if (ns.fileExists(\\\"FTPCrack.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"omega-net\\\")) {\\r\\n        // Hacking skill = 180\\r\\n        var latest_script = \\\"/manual/generic_hack/omega-net.js\\\"\\r\\n    } else if (ns.fileExists(\\\"BruteSSH.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"joesguns\\\")) {\\r\\n        // Hacking skill = 10\\r\\n        var latest_script = \\\"/manual/generic_hack/joesguns.js\\\"\\r\\n    } else {\\r\\n        var latest_script = \\\"/manual/generic_hack/n00dles.js\\\"\\r\\n    }\\r\\n\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            var hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            await ns.scp(latest_script, hostname);\\r\\n            ns.exec(latest_script, hostname, Math.floor(ram/2.6));\\r\\n\\r\\n            ++i;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/manual/server_related/purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/server_related/purchase.js\",\"url\":\"blob:file:///9273fb47-95ed-47ad-a7bf-e6bd49bbf5e4\",\"moduleSequenceNumber\":2918}],\"dependents\":[],\"ramUsage\":6.95,\"server\":\"home\",\"moduleSequenceNumber\":122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar delete_server = ns.args[0];\\r\\n\\r\\n\\tns.deleteServer(delete_server)\\r\\n}\",\"filename\":\"/manual/server_related/remove.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let maxServers = ns.getPurchasedServerLimit();\\r\\n    let maxSize = ns.getPurchasedServerMaxRam();\\r\\n    let money = ns.getPlayer().money;\\r\\n\\r\\n    var existingServers = ns.getPurchasedServers()\\r\\n    let currentSize = ns.getServerMaxRam(existingServers[0]);\\r\\n    for (let i = 0; i < existingServers.length;i++) {\\r\\n        var tempSize = ns.getServerMaxRam(existingServers[i]);\\r\\n        if (currentSize > tempSize) {\\r\\n            currentSize = tempSize\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Define scripts to use to target best possible company server\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"aevum-police\\\")) {\\r\\n        // Hacking skill = 406\\r\\n        var target_script = \\\"/manual/generic_hack/aevum-police.js\\\"\\r\\n    } else if (ns.fileExists(\\\"relaySMTP.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"computek\\\")) {\\r\\n        // Hacking skill = 392\\r\\n        var target_script = \\\"/manual/generic_hack/computek.js\\\"\\r\\n    } else if (ns.fileExists(\\\"FTPCrack.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"omega-net\\\")) {\\r\\n        // Hacking skill = 180\\r\\n        var target_script = \\\"/manual/generic_hack/omega-net.js\\\"\\r\\n    } else if (ns.fileExists(\\\"BruteSSH.exe\\\") && ns.getPlayer().hacking > ns.getServerRequiredHackingLevel(\\\"joesguns\\\")) {\\r\\n        // Hacking skill = 10\\r\\n        var target_script = \\\"/manual/generic_hack/joesguns.js\\\"\\r\\n    } else {\\r\\n        var target_script = \\\"/manual/generic_hack/n00dles.js\\\"\\r\\n    }\\r\\n    let ram = 1;\\r\\n\\r\\n    while (ram * 2 <= maxSize && ns.getPurchasedServerCost(ram * 2) < money / maxServers) {\\r\\n        ram *= 2;\\r\\n    }\\r\\n\\r\\n    if (ram < 2 || ram <= currentSize) {\\r\\n        ns.tprint(\\\"Can't afford upgrade - current \\\" + currentSize + \\\"GB, can afford \\\" + ram + \\\"GB\\\");\\r\\n        ns.tprint(\\\"Next server RAM upgrade is \\\" + currentSize * 2 + \\\"GB which costs \\\" +\\r\\n            ns.getPurchasedServerCost(ram * 2) / 1000 / 1000 + \\\"bil\\\")\\r\\n        ns.exit();\\r\\n    }\\r\\n\\r\\n    ns.tprint(\\\"Buying \\\" + maxServers + \\\" \\\" + ram + \\\"GB servers\\\")\\r\\n    for (let i = 0; i < existingServers.length; i++) {\\r\\n        if (ns.serverExists(existingServers[i])) {\\r\\n            ns.killall(existingServers[i]);\\r\\n            ns.deleteServer(existingServers[i]);\\r\\n        }\\r\\n        ns.purchaseServer(existingServers[i], ram);\\r\\n        await ns.scp(target_script, existingServers[i]);\\r\\n\\r\\n        ns.exec(target_script, existingServers[i], Math.floor(ram/2,6));\\r\\n    }\\r\\n}\",\"filename\":\"/manual/server_related/upgrade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/server_related/upgrade.js\",\"url\":\"blob:file:///c754009c-f5a7-4156-a29c-b7266ddb169c\",\"moduleSequenceNumber\":2997}],\"dependents\":[],\"ramUsage\":11.95,\"server\":\"home\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.hack('n00dles');\\r\\n        ns.printf('hacking');\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/bitburner_scripts/ts/testts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/build/Bitburner.t.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Script in-game ram requirement -> 13.55GB\\r\\n// import { serverCal } from \\\"./util/serverCal\\\";\\r\\nimport * as scan from '/build/util/scan';\\r\\nimport * as resourceMan from '/build/util/resourceMan';\\r\\nimport { portHackLvlCal } from '/build/util/portHackLvl';\\r\\n// import { purchaseServer } from '/build/pserver/purchasePServer';\\r\\n/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    let portHackLvl = 0;\\r\\n    let oldPortHackLvl = 0;\\r\\n    let numExistNodes = 0;\\r\\n    let end_script = 0;\\r\\n    let killHackPID = 0;\\r\\n    let serverCount = ns.getPurchasedServers().length;\\r\\n    // Call scan function to dump all available servers in game\\r\\n    // var[scannedServers, scannedServersFiltered] = await scanServer(ns);\\r\\n    let scannedServersFiltered = await scan.scanServer(ns);\\r\\n    // Kills all running scripts in all available servers\\r\\n    // for (let i = 0; i < scannedServersFiltered.length; i++) {\\r\\n    //     ns.killall(scannedServersFiltered[i].hostname);\\r\\n    // }\\r\\n    let homeProcess = ns.ps('home');\\r\\n    for (let i = 0; i < homeProcess.length; i++){\\r\\n        if (homeProcess[i].filename == '/build/exec/hack.js'){\\r\\n            killHackPID = homeProcess[i].pid;\\r\\n        }\\r\\n    }\\r\\n    ns.kill(killHackPID);\\r\\n    // Calculates optimal server to hack based on max money\\r\\n    // Will automatically hacks determined server after calculation\\r\\n    // ns.run/exec can only take in string, integer or boolean as arguments\\r\\n    // await serverCal(ns, scannedServersFiltered);\\r\\n    ns.run('/build/util/serverCal.js', 1);\\r\\n    while (!end_script) {\\r\\n        // Attempt to buy maximum number of pservers\\r\\n        // Then attempt to upgrade pservers to max RAM\\r\\n        if (serverCount < 25 && ns.getPlayer().money > ns.getPurchasedServerCost(8)) {\\r\\n            ns.tprint('Purchasing personal server');\\r\\n            // [serverCount, scannedServersFiltered] = await purchaseServer(ns, serverCount, scannedServersFiltered);\\r\\n            resourceMan.memAnalyze(ns, '/build/pserver/purchasePServer.js');\\r\\n            serverCount = ns.getPurchasedServers().length;\\r\\n        }\\r\\n        else if (serverCount == 25) {\\r\\n            ns.tprint('Upgrading personal server');\\r\\n            // await ns.run('/build/pserver/upgradePServer.js', 1);\\r\\n            resourceMan.memAnalyze(ns, '/build/pserver/upgradePServer.js');\\r\\n            // await serverCal(ns, scannedServersFiltered)\\r\\n            // await ns.run('/build/util/serverCal.js', 1);\\r\\n            // resourceMan.memAnalyze(ns, '/build/util/serverCal.js');\\r\\n        }\\r\\n        else {\\r\\n            ns.tprint(\\\"Not enough money at the moment for personal servers\\\");\\r\\n        }\\r\\n        // Sleep to let previous scripts deallocate memory\\r\\n        await ns.sleep(50000);\\r\\n        // Attempt to upgrade server to hack\\r\\n        if (portHackLvl != 5) {\\r\\n            ns.tprint('Checking current portHackLvl');\\r\\n            // await serverCal(ns, scannedServersFiltered);\\r\\n            portHackLvl = portHackLvlCal(ns);\\r\\n            if (portHackLvl > oldPortHackLvl) {\\r\\n                ns.tprint('portHackLvl upgraded');\\r\\n                // await ns.run('/build/util/serverCal.js', 1);\\r\\n                await resourceMan.memAnalyze(ns, '/build/util/serverCal.js');\\r\\n                oldPortHackLvl = portHackLvl;\\r\\n            } else {\\r\\n                ns.tprint('Current portHackLvl: ', oldPortHackLvl)\\r\\n            }\\r\\n        }\\r\\n        // Sleep to let previous scripts deallocate memory\\r\\n        await ns.sleep(50000);\\r\\n        // Attempt to buy/upgrade hacknet nodes\\r\\n        if (numExistNodes != 30) {\\r\\n            ns.tprint('Buying hacknet node');\\r\\n            ns.run('/build/hacknet/purchaseHacknet.js', 1);\\r\\n            // await resourceMan.memAnalyze(ns, '/build/hacknet/purchaseHacknet.js');\\r\\n            numExistNodes = ns.hacknet.numNodes();\\r\\n        }\\r\\n        else {\\r\\n            ns.tprint('Upgrading hacknet node');\\r\\n            ns.run('/build/hacknet/upgradeHacknet.js', 1);\\r\\n            // await resourceMan.memAnalyze(ns, '/build/hacknet/upgradeHacknet.js');\\r\\n        }\\r\\n        // Sleep to slow down loop and let while loop work\\r\\n        await ns.sleep(50000);\\r\\n    }\\r\\n}\",\"filename\":\"/build/main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"blob:file:///cb1f993c-57d8-47de-8e91-3f0f3bcdad92\",\"moduleSequenceNumber\":131},{\"filename\":\"/build/util/resourceMan.js\",\"url\":\"blob:file:///1d5f826f-a5d3-49c6-b1b0-88cf21c9a47a\",\"moduleSequenceNumber\":143},{\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"blob:file:///44fd07ec-67fb-46a2-955b-1a7ba323add5\",\"moduleSequenceNumber\":131},{\"filename\":\"/build/util/nuke.js\",\"url\":\"blob:file:///5b306192-f54a-4223-a577-a01ff5cb5ffa\",\"moduleSequenceNumber\":128},{\"filename\":\"/build/util/scan.js\",\"url\":\"blob:file:///c8b9e66e-ea9c-47bc-accb-dd2cd009499c\",\"moduleSequenceNumber\":129},{\"filename\":\"/build/main.js\",\"url\":\"blob:file:///088bd968-b8ad-4faf-85a8-61ec22c38193\",\"moduleSequenceNumber\":221}],\"dependents\":[],\"ramUsage\":11.65,\"server\":\"home\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { portHackLvlCal } from \\\"/build/util/portHackLvl\\\";\\r\\n/** @param {NS ns} **/\\r\\nexport async function nukeChecker(ns, scannedServersFiltered) {\\r\\n    let nukeSkipped = 0;\\r\\n    let portHackLvl = portHackLvlCal(ns);\\r\\n    for (let i = 0; i < scannedServersFiltered.length; i++) {\\r\\n        let serverName = scannedServersFiltered[i].hostname;\\r\\n        let serverLvl = scannedServersFiltered[i].hacklvl;\\r\\n        if (portHackLvl <= serverLvl || (serverName.includes(\\\"pserv-\\\"))) {\\r\\n            nukeSkipped += 1;\\r\\n        }\\r\\n        else {\\r\\n            let serverPort = scannedServersFiltered[i].numports;\\r\\n            await nuke(ns, serverName, serverPort, portHackLvl);\\r\\n        }\\r\\n    }\\r\\n    ns.tprint(\\\"Nuke script finished, number of servers skipped: \\\" + nukeSkipped);\\r\\n}\\r\\nasync function nuke(ns, serverName, serverPort, portHackLvl) {\\r\\n    if (portHackLvl == 1) {\\r\\n        ns.brutessh(serverName);\\r\\n    }\\r\\n    else if (portHackLvl == 2) {\\r\\n        ns.brutessh(serverName);\\r\\n        ns.ftpcrack(serverName);\\r\\n    }\\r\\n    else if (portHackLvl == 3) {\\r\\n        ns.brutessh(serverName);\\r\\n        ns.ftpcrack(serverName);\\r\\n        ns.relaysmtp(serverName);\\r\\n    }\\r\\n    else if (portHackLvl == 4) {\\r\\n        ns.brutessh(serverName);\\r\\n        ns.ftpcrack(serverName);\\r\\n        ns.relaysmtp(serverName);\\r\\n        ns.httpworm(serverName);\\r\\n    }\\r\\n    else if (portHackLvl == 5) {\\r\\n        ns.brutessh(serverName);\\r\\n        ns.ftpcrack(serverName);\\r\\n        ns.relaysmtp(serverName);\\r\\n        ns.httpworm(serverName);\\r\\n        ns.sqlinject(serverName);\\r\\n    }\\r\\n    if (serverPort <= portHackLvl) {\\r\\n        ns.nuke(serverName);\\r\\n        //await ns.installBackdoor(serverName)\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/util/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nukeChecker } from \\\"/build/util/nuke\\\";\\r\\n/** @param {NS ns} **/\\r\\nexport async function scanServer(ns) {\\r\\n    let hostName = ns.getHostname();\\r\\n    //ns.tprint(hostName)\\r\\n    let scanArray = [hostName];\\r\\n    //var scannedServers: any[] = [];\\r\\n    var scannedServersFiltered = [];\\r\\n    let currentScanLength = 0;\\r\\n    //ns.rm(\\\"server_list.txt\\\");\\r\\n    while (currentScanLength < scanArray.length) {\\r\\n        let previousScanLength = currentScanLength;\\r\\n        currentScanLength = scanArray.length;\\r\\n        for (let i = previousScanLength; i < currentScanLength; i++) {\\r\\n            let currentHost = scanArray[i];\\r\\n            let server, {} = {};\\r\\n            if (!currentHost.includes(\\\"pserv-\\\") || currentHost != 'home') {\\r\\n                server = { hostname: currentHost, hacklevel: ns.getServerRequiredHackingLevel(currentHost), maxmoney: ns.getServerMaxMoney(currentHost),\\r\\n                    growth: ns.getServerGrowth(currentHost), minsecurity: ns.getServerMinSecurityLevel(currentHost),\\r\\n                    ramsize: ns.getServerMaxRam(currentHost), numports: ns.getServerNumPortsRequired(currentHost) };\\r\\n            }\\r\\n            else {\\r\\n                server = { hostname: currentHost, ramsize: ns.getServerMaxRam(currentHost) };\\r\\n            }\\r\\n            //scannedServers.push(server);\\r\\n            if (server.ramsize >= 8 && !server.hostname.includes('home')) {\\r\\n                scannedServersFiltered.push(server);\\r\\n                //await ns.write(\\\"filter_list.txt\\\", server.hostname, \\\"a\\\")\\r\\n                //await ns.write(\\\"filter_list.txt\\\", \\\"\\\\n\\\", \\\"a\\\")\\r\\n            }\\r\\n            //await ns.write(\\\"server_list.txt\\\", currentHost, \\\"a\\\")\\r\\n            //await ns.write(\\\"server_list.txt\\\", \\\"\\\\n\\\", \\\"a\\\")\\r\\n            //ns.tprint(server.hostname);\\r\\n            //ns.tprint('----------------');\\r\\n            //ns.tprint('Difficulty: ' + server.hacklevel + ' | Potential: $' + server.maxmoney);\\r\\n            //ns.tprint('Growth Rate: ' + server.growth + ' | Security: ' + server.minsecurity);\\r\\n            //ns.tprint('RAM size: ' + server.ramsize);\\r\\n            //ns.tprint('----------------');\\r\\n            let newScan = ns.scan(currentHost);\\r\\n            for (let j = 0; j < newScan.length; j++) {\\r\\n                if (scanArray.indexOf(newScan[j]) == -1) {\\r\\n                    scanArray.push(newScan[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    await nukeChecker(ns, scannedServersFiltered);\\r\\n    //return [scannedServers, scannedServersFiltered];\\r\\n    return scannedServersFiltered;\\r\\n}\",\"filename\":\"/build/util/scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///cb5f30ea-4e99-4513-ace7-d2b3c081ef7b\",\"moduleSequenceNumber\":222}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport function portHackLvlCal(ns) {\\r\\n    let portHackLvl = 0;\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n        portHackLvl = 5;\\r\\n    }\\r\\n    else if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n        portHackLvl = 4;\\r\\n    }\\r\\n    else if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n        portHackLvl = 3;\\r\\n    }\\r\\n    else if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n        portHackLvl = 2;\\r\\n    } \\r\\n    else if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n        portHackLvl = 1;\\r\\n    }\\r\\n    return portHackLvl;\\r\\n}\",\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { portHackLvlCal } from '/build/util/portHackLvl';\\r\\nimport { scanServer } from '/build/util/scan';\\r\\n/** @param {NS ns} **/\\r\\n// export async function serverCal(ns, scannedServersFiltered) {\\r\\nexport async function main(ns) {\\r\\n    let portHackLvl = 0;\\r\\n    let highestLvlServerCount = 0;\\r\\n    let optimalServerIndex = 0;\\r\\n    const optimalServerMoney = 0;\\r\\n    let pushDone = 0;\\r\\n    let killHackPID = 0;\\r\\n    let killHackArg = \\\"\\\";\\r\\n    let killHackScript = \\\"\\\";\\r\\n    const playerHackLvl = ns.getPlayer().hacking;\\r\\n    const highestLvlServer = [];\\r\\n    // var scannedServers: any [] = [];\\r\\n    let scannedServersFiltered = [];\\r\\n    portHackLvl = portHackLvlCal(ns);\\r\\n    // [scannedServers, scannedServersFiltered] = await scanServer(ns);\\r\\n    scannedServersFiltered = await scanServer(ns);\\r\\n    while (pushDone != 1) {\\r\\n        \\r\\n        for (let i = 0; i < scannedServersFiltered.length; i++) {\\r\\n            if (scannedServersFiltered[i].numports == portHackLvl && scannedServersFiltered[i].hacklevel <= playerHackLvl && !scannedServersFiltered[i].hostname.includes('pserv-')) {\\r\\n                highestLvlServer.push(scannedServersFiltered[i]);\\r\\n                highestLvlServerCount += 1;\\r\\n                pushDone = 1;\\r\\n            }\\r\\n        }\\r\\n        if (pushDone != 1) {\\r\\n            portHackLvl -= 1;\\r\\n        }\\r\\n    }\\r\\n    for (let i = 0; i < highestLvlServerCount; i++) {\\r\\n        if (highestLvlServer[i].maxmoney > optimalServerMoney && highestLvlServer[i].hacklevel <= playerHackLvl) {\\r\\n            optimalServerIndex = i;\\r\\n        }\\r\\n    }\\r\\n    let homeProcess = ns.ps('home');\\r\\n    for (let i = 0; i < homeProcess.length; i++) {\\r\\n        if (homeProcess[i].filename == '/build/exec/hack.js') {\\r\\n            // killHackPID = homeProcess[i].pid;\\r\\n            killHackScript = homeProcess[i].filename;\\r\\n            killHackArg = homeProcess[i].args;\\r\\n        }\\r\\n    }\\r\\n    if (killHackArg[0] != highestLvlServer[optimalServerIndex].hostname) {\\r\\n        await serverExec(ns, scannedServersFiltered, highestLvlServer, optimalServerIndex, portHackLvl, killHackScript, killHackArg[0]);\\r\\n    }\\r\\n    return;\\r\\n}\\r\\nasync function serverExec(ns, scannedServersFiltered, highestLvlServer, optimalServerIndex, portHackLvl, killHackScript, killHackArg) {\\r\\n    const freeHomeRam = ns.getServerMaxRam('home') - ns.getServerUsedRam('home');\\r\\n    // Kills all running scripts in all available servers\\r\\n    for (let i = 0; i < scannedServersFiltered.length; i++) {\\r\\n        if (scannedServersFiltered[i].hostname != 'home') {\\r\\n            ns.killall(scannedServersFiltered[i].hostname);\\r\\n        }\\r\\n    }\\r\\n    ns.kill(killHackScript, 'home', killHackArg);\\r\\n    for (let i = 0; i < scannedServersFiltered.length; i++) {\\r\\n        await ns.scp('/build/exec/hack.js', scannedServersFiltered[i].hostname);\\r\\n        if (portHackLvl >= scannedServersFiltered[i].numports || scannedServersFiltered[i].hostname.includes('pserv-')) {\\r\\n            ns.exec('/build/exec/hack.js', scannedServersFiltered[i].hostname, Math.floor(scannedServersFiltered[i].ramsize / 2.4), highestLvlServer[optimalServerIndex].hostname);\\r\\n        }\\r\\n    }\\r\\n    const homeThread = Math.floor(freeHomeRam / 2.4);\\r\\n    if (homeThread > 0) {\\r\\n        ns.run('/build/exec/hack.js', homeThread, highestLvlServer[optimalServerIndex].hostname);\\r\\n    }\\r\\n}\",\"filename\":\"/build/util/serverCal.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"blob:file:///62a9605a-1034-430a-971b-fe8bcef1c02a\",\"moduleSequenceNumber\":131},{\"filename\":\"/build/util/nuke.js\",\"url\":\"blob:file:///385846e2-4bb7-4475-9344-5b366529c20b\",\"moduleSequenceNumber\":128},{\"filename\":\"/build/util/scan.js\",\"url\":\"blob:file:///cf934d46-8593-4c9b-9233-6d6f9b3efc77\",\"moduleSequenceNumber\":129},{\"filename\":\"/build/util/portHackLvl.js\",\"url\":\"blob:file:///e2c58293-4596-45db-81c7-f74499bfebe7\",\"moduleSequenceNumber\":131},{\"filename\":\"/build/util/serverCal.js\",\"url\":\"blob:file:///94635cdf-66be-4020-a21b-6cf61c58206f\",\"moduleSequenceNumber\":381}],\"dependents\":[],\"ramUsage\":7.45,\"server\":\"home\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import { serverCal } from \\\"../util/serverCal\\\";\\r\\nimport * as resourceMan from '/build/util/resourceMan';\\r\\n/** @param {NS ns} **/\\r\\n//export async function purchaseServer(ns, serverCount, scannedServersFiltered) {\\r\\nexport async function main (ns) {\\r\\n    var defaultRamSize = 8;\\r\\n    let killHackArg = \\\"\\\";\\r\\n    let serverCount = ns.getPurchasedServers().length;\\r\\n    //while (serverCount < ns.getPurchasedServerLimit()) {\\r\\n    if (ns.getPlayer().money > ns.getPurchasedServerCost(defaultRamSize)) {\\r\\n        let hostName = \\\"pserv-\\\" + serverCount;\\r\\n        ns.purchaseServer(hostName, defaultRamSize);\\r\\n        let hostNameServer = { hostname: hostName, ramsize: ns.getServerMaxRam(hostName) };\\r\\n        ns.tprint(\\\"Purchased personal server: \\\" + hostName);\\r\\n        ns.tprint(\\\"Verify server purchased: \\\" + hostNameServer.hostname);\\r\\n        // scannedServersFiltered.push(hostNameServer);\\r\\n        // serverCount += 1;\\r\\n        // await serverCal(ns, scannedServersFiltered)\\r\\n        // ns.run(\\\"/build/util/serverCal.js\\\", 1);\\r\\n        // resourceMan.memAnalyze(ns, '/build/util/serverCal.js');\\r\\n        let homeProcess = ns.ps('home');\\r\\n        for (let i = 0; i < homeProcess.length; i++) {\\r\\n            if (homeProcess[i].filename == '/build/exec/hack.js') {\\r\\n            killHackArg = homeProcess[i].args;\\r\\n            }\\r\\n        }\\r\\n        if (killHackArg) {\\r\\n            await ns.scp('/build/exec/hack.js', hostName);\\r\\n            ns.exec('/build/exec/hack.js', hostName, Math.floor(ns.getServerMaxRam(hostName)/2.4), killHackArg[0]);\\r\\n        } else {\\r\\n            resourceMan.memAnalyze(ns, '/build/util/serverCal.js');\\r\\n        }\\r\\n    }\\r\\n    //await ns.sleep(3000);\\r\\n    //}\\r\\n    //return [serverCount, scannedServersFiltered];\\r\\n}\",\"filename\":\"/build/pserver/purchasePServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/util/resourceMan.js\",\"url\":\"blob:file:///c00ec259-65b8-47e3-9a96-b0ccacc4e94b\",\"moduleSequenceNumber\":27889},{\"filename\":\"/build/pserver/purchasePServer.js\",\"url\":\"blob:file:///46ecfdb3-7225-4491-a5d4-492c06d32fcc\",\"moduleSequenceNumber\":36081}],\"dependents\":[],\"ramUsage\":10.65,\"server\":\"home\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import { serverCal } from \\\"../util/serverCal\\\"\\r\\n/** @param {NS ns} **/\\r\\n//export async function upgradeServer(ns, scannedServersFiltered) {\\r\\nexport async function main(ns) {\\r\\n    let poorChecker = 0;\\r\\n    let startRamSize = 8;\\r\\n    let killHackArg = \\\"\\\";\\r\\n    let pserverMaxRam = ns.getPurchasedServerMaxRam();\\r\\n    let playerMoney = ns.getPlayer().money;\\r\\n    var existingServers = ns.getPurchasedServers();\\r\\n    let currentServerSize = ns.getServerMaxRam(existingServers[0]);\\r\\n    if (existingServers.length != 0) {\\r\\n        for (let i = 0; i < existingServers.length; i++) {\\r\\n            var tempSize = ns.getServerMaxRam(existingServers[i]);\\r\\n            if (tempSize > currentServerSize) {\\r\\n                currentServerSize = tempSize;\\r\\n            }\\r\\n        }\\r\\n        while (startRamSize * 2 <= pserverMaxRam && ns.getPurchasedServerCost(startRamSize * 2) < playerMoney / existingServers.length) {\\r\\n            startRamSize *= 2;\\r\\n        }\\r\\n        if (startRamSize <= 8 || startRamSize <= currentServerSize) {\\r\\n            ns.tprint(\\\"Can't afford upgrade - current \\\" + currentServerSize + \\\"GB, can afford \\\" + startRamSize + \\\"GB\\\");\\r\\n            ns.tprint(\\\"Next server RAM upgrade is \\\" + currentServerSize * 2 + \\\"GB which costs \\\" +\\r\\n                ns.getPurchasedServerCost(currentServerSize * 2) / 1000 / 1000 + \\\"bil\\\");\\r\\n            //await ns.sleep(60000);\\r\\n            poorChecker = 1;\\r\\n        }\\r\\n        if (poorChecker != 1) {\\r\\n            ns.tprint(\\\"Buying \\\" + existingServers.length + \\\" \\\" + startRamSize + \\\"GB servers\\\");\\r\\n            for (let i = 0; i < existingServers.length; i++) {\\r\\n                if (ns.serverExists(existingServers[i])) {\\r\\n                    ns.killall(existingServers[i]);\\r\\n                    ns.deleteServer(existingServers[i]);\\r\\n                }\\r\\n                ns.purchaseServer(existingServers[i], startRamSize);\\r\\n                ns.killall(existingServers[i]);\\r\\n                let homeProcess = ns.ps('home');\\r\\n                for (let i = 0; i < homeProcess.length; i++) {\\r\\n                    if (homeProcess[i].filename == '/build/exec/hack.js') {\\r\\n                        killHackArg = homeProcess[i].args;\\r\\n                    }\\r\\n                }\\r\\n                await ns.scp('/build/exec/hack.js', existingServers[i]);\\r\\n                if (killHackArg) {\\r\\n                    ns.exec('/build/exec/hack.js', existingServers[i], Math.floor(ns.getServerMaxRam(existingServers[i])/2.4), killHackArg[0])\\r\\n                } else {\\r\\n                    ns.run('/build/util/serverCal.js', 1);\\r\\n                }\\r\\n                //await serverCal(ns, scannedServersFiltered)\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        await ns.sleep(60000);\\r\\n    }\\r\\n\\r\\n    return;\\r\\n}\",\"filename\":\"/build/pserver/upgradePServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/pserver/upgradePServer.js\",\"url\":\"blob:file:///24ebdcfa-bcd8-4e4e-8a8e-3419db1b40ee\",\"moduleSequenceNumber\":604}],\"dependents\":[],\"ramUsage\":12.9,\"server\":\"home\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as resourceMan from '/build/util/resourceMan';\\r\\n\\r\\n/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    let playerMoney = ns.getPlayer().money;\\r\\n    const numExistNodes = ns.hacknet.numNodes();\\r\\n    if (numExistNodes < ns.hacknet.maxNumNodes() && playerMoney >= ns.hacknet.getPurchaseNodeCost()) {\\r\\n        let nodeIndex = ns.hacknet.purchaseNode();\\r\\n        ns.tprint(\\\"Purchasing hacknet node of index \\\" + nodeIndex);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(\\\"Skipping purchase and going to upgrade\\\");\\r\\n        // ns.run(\\\"/build/hacknet/upgradeHacknet.js\\\", 1);\\r\\n        resourceMan.memAnalyze(ns, '/build/hacknet/upgradeHacknet.js')\\r\\n    }\\r\\n    return;\\r\\n}\",\"filename\":\"/build/hacknet/purchaseHacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/util/resourceMan.js\",\"url\":\"blob:file:///0246f07b-cfc5-443d-9a97-1801c89b50b9\",\"moduleSequenceNumber\":143},{\"filename\":\"/build/hacknet/purchaseHacknet.js\",\"url\":\"blob:file:///543a23e1-fe80-405a-b9b7-1583f9d15918\",\"moduleSequenceNumber\":492}],\"dependents\":[],\"ramUsage\":8,\"server\":\"home\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport function main(ns) {\\r\\n    const numExistNodes = ns.hacknet.numNodes();\\r\\n    const maxCore = 16;\\r\\n    const maxLevel = 200;\\r\\n    const maxRam = 64;\\r\\n    const maxNode = ns.hacknet.maxNumNodes();\\r\\n    let playerMoney = ns.getPlayer().money;\\r\\n    let existNodes = [];\\r\\n    for (let i = 0; i < numExistNodes; i++) {\\r\\n        existNodes.push(ns.hacknet.getNodeStats(i));\\r\\n    }\\r\\n    let canUpgradeCore = existNodes.filter(x => x.cores < maxCore);\\r\\n    let canUpgradeLevel = existNodes.filter(x => x.level < maxLevel);\\r\\n    let canUpgradeRam = existNodes.filter(x => x.ram < maxRam);\\r\\n    if (canUpgradeCore.length > 0) {\\r\\n        let cheapestIndex = canUpgradeCore.sort((a, b) => a.cores - b.cores)[0];\\r\\n        let cheapest = existNodes.indexOf(cheapestIndex);\\r\\n        if (ns.hacknet.getCoreUpgradeCost(cheapest, 1) < playerMoney) {\\r\\n            ns.tprint(\\\"Upgrading core num of node \\\" + cheapest);\\r\\n            ns.hacknet.upgradeCore(cheapest, 1);\\r\\n        }\\r\\n    }\\r\\n    if (canUpgradeRam.length > 0) {\\r\\n        let cheapestIndex = canUpgradeRam.sort((a, b) => a.ram - b.ram)[0];\\r\\n        let cheapest = existNodes.indexOf(cheapestIndex);\\r\\n        if (ns.hacknet.getRamUpgradeCost(cheapest, 1) < playerMoney) {\\r\\n            ns.tprint(\\\"Upgrading ram num of node \\\" + cheapest);\\r\\n            ns.hacknet.upgradeRam(cheapest, 1);\\r\\n        }\\r\\n    }\\r\\n    if (canUpgradeLevel.length > 0) {\\r\\n        let cheapestIndex = canUpgradeLevel.sort((a, b) => a.level - b.level)[0];\\r\\n        let cheapest = existNodes.indexOf(cheapestIndex);\\r\\n        if (ns.hacknet.getLevelUpgradeCost(cheapest, 10) < playerMoney) {\\r\\n            ns.tprint(\\\"Upgrading level of node \\\" + cheapest);\\r\\n            ns.hacknet.upgradeLevel(cheapest, 10);\\r\\n        }\\r\\n    }\\r\\n    if (numExistNodes == maxNode && canUpgradeCore.length == 0 && canUpgradeLevel.length == 0 && canUpgradeRam.length == 0) {\\r\\n        ns.tprint(\\\"All hacknet nodes are fully upgraded\\\");\\r\\n        return;\\r\\n    }\\r\\n    else {\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"/build/hacknet/upgradeHacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/hacknet/upgradeHacknet.js\",\"url\":\"blob:file:///ae0d2f5e-09d4-41ce-809b-3d641c8fbc13\",\"moduleSequenceNumber\":493}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ServerType = {'Own': 'Own',\\r\\n  'Shop': 'Shop',\\r\\n  'Faction': 'Faction',\\r\\n  'MoneyFarm': 'MoneyFarm',\\r\\n  'Target': 'Target'};\\r\\n\\r\\nconst getServerType = (ns, name) => {\\r\\n  // Assumes all owned servers are called 'pserv-'\\r\\n  if (name.startsWith('pserv-')) {\\r\\n    return ServerType.Own;\\r\\n  }\\r\\n  switch (name) {\\r\\n    case 'darkweb':\\r\\n      return ServerType.Shop;\\r\\n    case 'CSEC':\\r\\n    case 'avmnite-02h':\\r\\n    case 'I.I.I.I':\\r\\n    case 'run4theh111z':\\r\\n      return ServerType.Faction;\\r\\n    case 'The-Cave':\\r\\n    case 'w0r1d_d43m0n':\\r\\n      return ServerType.Target;\\r\\n    default:\\r\\n      return ServerType.MoneyFarm;\\r\\n  }\\r\\n};\\r\\n\\r\\n// Covers the whole screen in a blank square. When the mouse moves\\r\\n// over it, the square disappears and the command is executed.\\r\\nexport function inject(ns, code) {\\r\\n  const id = '' + Math.random() + Math.random();\\r\\n  let output = `<div id=\\\"${id}\\\" style=\\\"position:absolute; width:100%; height:100%\\\" `;\\r\\n  output += `onmouseover=\\\"${code} document.getElementById(\\\\'${id}\\\\').remove();\\\"></div>`;\\r\\n  ns.tprint(output);\\r\\n}\\r\\n\\r\\nexport function cmd(ns, cmd) {\\r\\n  let code = `document.getElementById('terminal-input-text-box').value = '${cmd}';`;\\r\\n  code += 'document.body.dispatchEvent(new KeyboardEvent(\\\\'keydown\\\\', {';\\r\\n  code += 'bubbles: true, cancelable: true, keyCode: 13 }));';\\r\\n  inject(ns, code);\\r\\n}\\r\\n\\r\\nexport class Server {\\r\\n  /**\\r\\n     * @param {NS} ns\\r\\n     * @returns {Server[]}\\r\\n     */\\r\\n  static get(ns) {\\r\\n    const visited = {'home': true};\\r\\n    const servers = [];\\r\\n    const queue = [new Server(ns, 'home')];\\r\\n    while (queue.length > 0) {\\r\\n      const curr = queue.pop();\\r\\n      servers.push(curr);\\r\\n      const depth = curr.depth + 1;\\r\\n      ns.scan(curr.name).forEach((name) => {\\r\\n        if (!visited[name]) {\\r\\n          const server = new Server(ns, name, depth);\\r\\n          queue.push(server);\\r\\n          visited[name] = true;\\r\\n        }\\r\\n      });\\r\\n    }\\r\\n    return servers;\\r\\n  }\\r\\n\\r\\n  static create(ns, name) {\\r\\n    return new Server(ns, name);\\r\\n  }\\r\\n\\r\\n  static types() {\\r\\n    return ServerType;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @param {NS} ns\\r\\n   * @param {string} name\\r\\n   * @param {number} depth\\r\\n   */\\r\\n  constructor(ns, name, depth = 0) {\\r\\n    this.type = getServerType(ns, name);\\r\\n    this.ns = ns;\\r\\n    this.name = name;\\r\\n    this.depth = depth;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {number}\\r\\n   */\\r\\n  get moneyAvail() {\\r\\n    return this.ns.getServerMoneyAvailable(this.name);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {number}\\r\\n   */\\r\\n  get moneyMax() {\\r\\n    return this.ns.getServerMaxMoney(this.name);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {boolean}\\r\\n   */\\r\\n  get hasMaxMoney() {\\r\\n    return this.moneyAvail === this.moneyMax;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {number}\\r\\n   */\\r\\n  get securityMin() {\\r\\n    return this.ns.getServerMinSecurityLevel(this.name);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {number}\\r\\n   */\\r\\n  get securityCurr() {\\r\\n    return this.ns.getServerSecurityLevel(this.name);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {boolean}\\r\\n   */\\r\\n  get hasMinSecurity() {\\r\\n    return this.securityCurr === this.securityMin;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @returns {boolean}\\r\\n   */\\r\\n  get hasRoot() {\\r\\n    return this.ns.hasRootAccess(this.name);\\r\\n  }\\r\\n\\r\\n  get levelNeeded() {\\r\\n    return this.ns.getServerRequiredHackingLevel(this.name);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @param {number} crackingScripts\\r\\n   * @returns {boolean}\\r\\n   */\\r\\n  canCrack(crackingScripts) {\\r\\n    if (this.hasRoot) {\\r\\n      return False;\\r\\n    }\\r\\n    const ports = this.ns.getServerNumPortsRequired(this.name);\\r\\n    if (ports > crackingScripts) {\\r\\n      return False;\\r\\n    }\\r\\n    return this.levelNeeded <= this.ns.getHackingLevel();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @param {string[]} availableCrackingScripts\\r\\n   * @returns {boolean} success of cracking\\r\\n   */\\r\\n  crack(availableCrackingScripts) {\\r\\n    if (this.hasRoot) {\\r\\n      return true;\\r\\n    }\\r\\n    if (!this.canCrack(availableCrackingScripts.length)) {\\r\\n      return False;\\r\\n    }\\r\\n    availableCrackingScripts.forEach((script) => {\\r\\n      switch (script) {\\r\\n        case 'httpworm':\\r\\n        case 'httpworm.exe':\\r\\n          this.ns.httpworm(this.name);\\r\\n          break;\\r\\n        case 'sqlinject':\\r\\n        case 'sqlinject.exe':\\r\\n          this.ns.sqlinject(this.name);\\r\\n          break;\\r\\n        case 'ftpcrack':\\r\\n        case 'ftpcrack.exe':\\r\\n          this.ns.ftpcrack(this.name);\\r\\n          break;\\r\\n        case 'relaysmtp':\\r\\n        case 'relaysmtp.exe':\\r\\n          this.ns.relaysmtp(this.name);\\r\\n          break;\\r\\n        case 'brutessh':\\r\\n        case 'brutessh.exe':\\r\\n          this.ns.brutessh(this.name);\\r\\n          break;\\r\\n      }\\r\\n    });\\r\\n    this.ns.nuke(this.name);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/manual/reddit/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Covers the whole screen in a blank square. When the mouse moves \\r\\n//over it, the square disappears and the command is executed.\\r\\nexport function inject(ns, code) {\\r\\n    let id = '' + Math.random() + Math.random();\\r\\n    let output = `<div id=\\\"${id}\\\" style=\\\"position:absolute; width:100%; height:100%\\\" `;\\r\\n    output += `onmouseover=\\\"${code} document.getElementById(\\\\'${id}\\\\').remove();\\\"></div>`;\\r\\n    ns.tprint(output);\\r\\n}\\r\\n\\r\\nexport function cmd(ns, cmd) {\\r\\n    let code = `document.getElementById('terminal-input-text-box').value = '${cmd}';`;\\r\\n    code += \\\"document.body.dispatchEvent(new KeyboardEvent('keydown', {\\\";\\r\\n    code += \\\"bubbles: true, cancelable: true, keyCode: 13 }));\\\";\\r\\n    inject(ns, code);\\r\\n}\\r\\n\\r\\nlet svObj = (name = 'home', depth = 0) => ({name: name, depth: depth});\\r\\nexport function getServers(ns) {\\r\\n    let result = [];\\r\\n    let visited = { 'home': 0 };\\r\\n    let queue = Object.keys(visited);\\r\\n    let name;\\r\\n    while ((name = queue.pop())) {\\r\\n        let depth = visited[name];\\r\\n        result.push(svObj(name, depth));\\r\\n        let scanRes = ns.scan(name);\\r\\n        for (let i = scanRes.length; i >= 0; i--){\\r\\n            if (visited[scanRes[i]] === undefined) {\\r\\n                queue.push(scanRes[i]);\\r\\n                visited[scanRes[i]] = depth + 1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return result;\\r\\n}\",\"filename\":\"/manual/reddit/scan_v2/helper.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    cmd,\\r\\n    getServers\\r\\n} from \\\"helper.ns\\\";\\r\\n\\r\\n\\r\\nlet facServers = {\\r\\n    \\\"CSEC\\\" : \\\"yellow\\\",\\r\\n    \\\"avmnite-02h\\\" : \\\"yellow\\\",\\r\\n    \\\"I.I.I.I\\\" : \\\"yellow\\\",\\r\\n    \\\"run4theh111z\\\" : \\\"yellow\\\",\\r\\n    \\\"The-Cave\\\" : \\\"orange\\\",\\r\\n    \\\"w0r1d_d43m0n\\\" : \\\"red\\\"\\r\\n};\\r\\n\\r\\nexport async function main(ns) {\\r\\n    let output = \\\"Network:\\\";\\r\\n    getServers(ns).forEach(server => {\\r\\n        let name = server.name;\\r\\n        let hackColor = ns.hasRootAccess(name) ? \\\"lime\\\" : \\\"red\\\";\\r\\n        let nameColor = facServers[name] ? facServers[name] : \\\"white\\\";\\r\\n        \\r\\n        let hoverText = [\\\"Req Level: \\\", ns.getServerRequiredHackingLevel(name),\\r\\n            \\\"&#10;Req Ports: \\\", ns.getServerNumPortsRequired(name),\\r\\n            \\\"&#10;Memory: \\\", ns.getServerRam(name)[0], \\\"GB\\\",\\r\\n            \\\"&#10;Security: \\\", ns.getServerSecurityLevel(name),\\r\\n            \\\"/\\\", ns.getServerMinSecurityLevel(name),\\r\\n            \\\"&#10;Money: \\\", Math.round(ns.getServerMoneyAvailable(name)).toLocaleString(), \\\" (\\\", \\r\\n            Math.round(100 * ns.getServerMoneyAvailable(name)/ns.getServerMaxMoney(name)), \\\"%)\\\"\\r\\n            ].join(\\\"\\\");\\r\\n        \\r\\n        let ctText = \\\"\\\";\\r\\n        ns.ls(name, \\\".cct\\\").forEach(ctName => {\\r\\n            ctText += [\\\"<a title='\\\", ctName,\\r\\n                //Comment out the next line to reduce footprint by 5 GB\\r\\n                \\\"&#10;\\\", ns.codingcontract.getContractType(ctName, name),\\r\\n                \\\"'>©</a>\\\"].join(\\\"\\\"); \\r\\n        });\\r\\n        \\r\\n        output += [\\\"<br>\\\", \\\" \\\".repeat(server.depth),\\r\\n            `<font color=${hackColor}>■ </font>`,\\r\\n            `<a class='scan-analyze-link' title='${hoverText}'' style='color:${nameColor}'>${name}</a> `,\\r\\n            `<font color='fuchisa'>${ctText}</font>`,\\r\\n            ].join(\\\"\\\");\\r\\n    });\\r\\n    ns.tprint(output);\\r\\n    cmd(ns, 'scan-analyze 0');\",\"filename\":\"/manual/reddit/scan_v2/scan.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":139}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Covers the whole screen in a blank square. When the mouse moves\\r\\n// over it, the square disappears and the command is executed.\\r\\nexport function inject(ns, code) {\\r\\n  const id = '' + Math.random() + Math.random();\\r\\n  let output = `<div id=\\\"${id}\\\" style=\\\"position:absolute; width:100%; height:100%\\\" `;\\r\\n  output += `onmouseover=\\\"${code} document.getElementById(\\\\'${id}\\\\').remove();\\\"></div>`;\\r\\n  ns.tprint(output);\\r\\n}\\r\\n\\r\\nexport function cmd(ns, cmd) {\\r\\n  let code = `document.getElementById('terminal-input-text-box').value = '${cmd}';`;\\r\\n  code += 'document.body.dispatchEvent(new KeyboardEvent(\\\\'keydown\\\\', {';\\r\\n  code += 'bubbles: true, cancelable: true, keyCode: 13 }));';\\r\\n  inject(ns, code);\\r\\n}\\r\\n\\r\\nconst svObj = (name = 'home', depth = 0) => ({name: name, depth: depth});\\r\\nexport function getServers(ns) {\\r\\n  const result = [];\\r\\n  const visited = {'home': 0};\\r\\n  const queue = Object.keys(visited);\\r\\n  let name;\\r\\n  while ((name = queue.pop())) {\\r\\n    const depth = visited[name];\\r\\n    result.push(svObj(name, depth));\\r\\n    const scanRes = ns.scan(name);\\r\\n    for (let i = scanRes.length; i >= 0; i--) {\\r\\n      if (visited[scanRes[i]] === undefined) {\\r\\n        queue.push(scanRes[i]);\\r\\n        visited[scanRes[i]] = depth + 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  return result;\\r\\n}\\r\\n\",\"filename\":\"/manual/reddit/scan_v2/helper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n  cmd,\\r\\n  getServers,\\r\\n} from './manual/reddit/scan_v2/helper';\\r\\n\\r\\n\\r\\nconst facServers = {\\r\\n  'CSEC': 'yellow',\\r\\n  'avmnite-02h': 'yellow',\\r\\n  'I.I.I.I': 'yellow',\\r\\n  'run4theh111z': 'yellow',\\r\\n  'The-Cave': 'orange',\\r\\n  'w0r1d_d43m0n': 'red',\\r\\n};\\r\\n\\r\\nexport async function main(ns) {\\r\\n  let output = 'Network:';\\r\\n  getServers(ns).forEach((server) => {\\r\\n    const name = server.name;\\r\\n    const hackColor = ns.hasRootAccess(name) ? 'lime' : 'red';\\r\\n    const nameColor = facServers[name] ? facServers[name] : 'white';\\r\\n\\r\\n    const hoverText = ['Req Level: ', ns.getServerRequiredHackingLevel(name),\\r\\n      '&#10;Req Ports: ', ns.getServerNumPortsRequired(name),\\r\\n      '&#10;Memory: ', ns.getServerRam(name)[0], 'GB',\\r\\n      '&#10;Security: ', ns.getServerSecurityLevel(name),\\r\\n      '/', ns.getServerMinSecurityLevel(name),\\r\\n      '&#10;Money: ', Math.round(ns.getServerMoneyAvailable(name)).toLocaleString(), ' (',\\r\\n      Math.round(100 * ns.getServerMoneyAvailable(name)/ns.getServerMaxMoney(name)), '%)',\\r\\n    ].join('');\\r\\n\\r\\n    let ctText = '';\\r\\n    ns.ls(name, '.cct').forEach((ctName) => {\\r\\n      ctText += ['<a title=\\\\'', ctName,\\r\\n        // Comment out the next line to reduce footprint by 5 GB\\r\\n        '&#10;', ns.codingcontract.getContractType(ctName, name),\\r\\n        '\\\\'>©</a>'].join('');\\r\\n    });\\r\\n\\r\\n    output += ['<br>', ' '.repeat(server.depth),\\r\\n      `<font color=${hackColor}>■ </font>`,\\r\\n      `<a class='scan-analyze-link' title='${hoverText}'' style='color:${nameColor}'>${name}</a> `,\\r\\n      `<font color='fuchisa'>${ctText}</font>`,\\r\\n    ].join('');\\r\\n  });\\r\\n  ns.tprint(output);\\r\\n  cmd(ns, 'scan-analyze 0');\\r\\n}\",\"filename\":\"/manual/reddit/scan_v2/scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/reddit/scan_v2/helper.js\",\"url\":\"blob:file:///9e9bf627-7813-4fef-9786-dfaf413a9f10\",\"moduleSequenceNumber\":1974},{\"filename\":\"/manual/reddit/scan_v2/scan.js\",\"url\":\"blob:file:///de012545-3875-4b8c-8866-a05386d1c42b\",\"moduleSequenceNumber\":2277}],\"dependents\":[],\"ramUsage\":7.75,\"server\":\"home\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let _ns;\\r\\nexport async function main(ns) {\\r\\n  const seenList = [];\\r\\n  _ns = ns;\\r\\n  scanServer('home', seenList, 0, '');\\r\\n}\\r\\n\\r\\nfunction scanServer(serverName, seenList, indent, prefix) {\\r\\n  if (seenList.includes(serverName)) return;\\r\\n  seenList.push(serverName);\\r\\n\\r\\n  let serverList = _ns.scan(serverName);\\r\\n  serverList = serverList.filter(function(item) {\\r\\n    return seenList.indexOf(item) === -1;\\r\\n  });\\r\\n  serverList = serverList.sort(childCountCompare);\\r\\n\\r\\n  for (let i = 0; i < serverList.length; i++) {\\r\\n    const newServer = serverList[i];\\r\\n    if (seenList.includes(newServer)) continue;\\r\\n    if (i != serverList.length - 1) {\\r\\n      printServerInfo(newServer, indent, prefix + '├─');\\r\\n      scanServer(newServer, seenList, indent + 1, prefix + '│    ');\\r\\n    } else {\\r\\n      printServerInfo(newServer, indent, prefix + '└─');\\r\\n      scanServer(newServer, seenList, indent + 1, prefix + '     ');\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction childCountCompare(a, b) {\\r\\n  const ax = childCount(a);\\r\\n  const bx = childCount(b);\\r\\n  return ax > bx ? 1 : -1;\\r\\n  // return childCount(a) > childCount(b) ? 1 : -1;\\r\\n}\\r\\n\\r\\nfunction childCount(serverName) {\\r\\n  let count = 0;\\r\\n  const serverList = _ns.scan(serverName);\\r\\n  for (let i = 1; i < serverList.length; i++) {\\r\\n    count += childCount(serverList[i]) + 1;\\r\\n  }\\r\\n  return count;\\r\\n}\\r\\n\\r\\nfunction printServerInfo(serverName, indent, prefix) {\\r\\n  const indentString = prefix;\\r\\n  const hacked = (_ns.hasRootAccess(serverName)) ? '██' : '[]';\\r\\n  const serverHackingLevel = _ns.getServerRequiredHackingLevel(serverName);\\r\\n  let canHackIndicator = '';\\r\\n  if (_ns.getHackingLevel() >= serverHackingLevel && !_ns.hasRootAccess(serverName)) {\\r\\n    canHackIndicator = '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!';\\r\\n  }\\r\\n  _ns.tprint(indentString + hacked + serverName + ' (' + serverHackingLevel + ')' + canHackIndicator);\\r\\n}\\r\\n\",\"filename\":\"/manual/reddit/network_map/map.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/reddit/network_map/map.js\",\"url\":\"blob:file:///1914f175-5843-41ae-a8e6-1868993ed67c\",\"moduleSequenceNumber\":2674}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\nexport function memAnalyze(ns, activeScript) {\\n    let homeFreeRam = ns.getServerMaxRam('home') - ns.getServerUsedRam('home');\\n    let scriptMemSize = ns.getScriptRam(activeScript);\\n    if (scriptMemSize > homeFreeRam) {\\n        let homeProcess = ns.ps('home');\\n        for (let i = 0; i < homeProcess.length; i++) {\\n            if (homeProcess[i].filename == '/build/exec/hack.js') {\\n                // let killHackPID = homeProcess[i].pid;\\n                let killHackScript = homeProcess[i].filename;\\n                let killHackArg = homeProcess[i].args;\\n                if (activeScript == '/build/util/serverCal.js') {\\n                    ns.kill(killHackScript, 'home', killHackArg[0]);\\n                    ns.run(activeScript, 1);\\n                }\\n                else {\\n                    ns.kill(killHackScript, 'home', killHackArg[0]);\\n                    ns.run(activeScript, 1);\\n                    let homeRemainRam = ns.getServerMaxRam('home') - ns.getServerUsedRam('home');\\n                    const homeThread = Math.floor(homeRemainRam / 2.4);\\n                    if (homeThread > 0) {\\n                        ns.run('/build/exec/hack.js', homeThread, killHackArg[0]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    else {\\n        ns.run(activeScript, 1);\\n    }\\n}\",\"filename\":\"/build/util/resourceMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let serverNetworkFile = \\\"./server_map.txt\\\"\\nlet doc = eval(\\\"document\\\"),\\n    f = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\"],\\n    css = `<style id=\\\"scanCSS\\\">\\n        .sc {white-space:pre; color:#ccc; font:14px monospace; line-height: 16px; }\\n        .sc .s {color:#080;cursor:pointer;text-decoration:underline}\\n        .sc .f {color:#088}\\n        .sc .r {color:#6f3}\\n        .sc .r.f {color:#0ff}\\n        .sc .r::before {color:#6f3}\\n        .sc .hack {display:inline-block; font:12px monospace}\\n        .sc .red {color:red;}\\n        .sc .green {color:green;}\\n    </style>`,\\n    tprint = html => doc.getElementById(\\\"terminal\\\").insertAdjacentHTML('beforeend', `<li>${html}</li>`);\\n\\n/** @param {NS} ns **/\\nexport let main = ns => {\\n    let tIn = doc.getElementById(\\\"terminal-input\\\"),\\n        tEv = tIn[Object.keys(tIn)[1]];\\n    doc.head.insertAdjacentHTML('beforeend', doc.getElementById(\\\"scanCSS\\\") ? \\\"\\\" : css);\\n    let s = [\\\"home\\\"],\\n        p = [\\\"\\\"],\\n        r = { home: \\\"home\\\" },\\n        myHack = ns.getHackingLevel(),\\n        fName = x => {\\n            let reqHack = ns.getServerRequiredHackingLevel(x);\\n            return `<a class=\\\"s${f.includes(x) ? \\\" f\\\" : \\\"\\\"}${ns.hasRootAccess(x) ? \\\" r\\\" : \\\"\\\"}\\\">${x}</a>` +\\n                ` <span class=\\\"hack ${(reqHack <= myHack ? 'green' : 'red')}\\\">(${reqHack})</span>`;\\n        };\\n    let tcommand = x => {\\n        tIn.value = x;\\n        tEv.onChange({ target: tIn });\\n        tEv.onKeyDown({ keyCode: \\\"13\\\", preventDefault: () => 0 });\\n    };\\n\\n    let addSc = (x = s[0], p1 = [\\\"\\\\n\\\"], o = p1.join(\\\"\\\") + fName(x)) => {\\n        for (let i = 0; i < s.length; i++) {\\n            if (p[i] != x) continue;\\n            let p2 = p1.slice();\\n            p2[p2.length - 1] = p2[p2.push(p.slice(i + 1).includes(p[i]) ? \\\"├╴\\\" : \\\"└╴\\\") - 2].replace(\\\"├╴\\\", \\\"│ \\\").replace(\\\"└╴\\\", \\\"  \\\");\\n            o += addSc(s[i], p2);\\n        }\\n        return o;\\n    };\\n    for (let i = 0, j; i < s.length; i++)\\n        for (j of ns.scan(s[i]))\\n            if (!s.includes(j)) s.push(j), p.push(s[i]), r[j] = r[s[i]] + \\\";connect \\\" + j;\\n    tprint(`<div class=\\\"sc new\\\">${addSc()}</div>`);\\n    doc.querySelectorAll(\\\".sc.new .s\\\").forEach(q => q.addEventListener('click', tcommand.bind(null, r[q.childNodes[0].nodeValue])));\\n    doc.querySelector(\\\".sc.new\\\").classList.remove(\\\"new\\\");\\n};\",\"filename\":\"/build/exec/serverMap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/exec/serverMap.js\",\"url\":\"blob:file:///7111b3a4-e510-48ca-8221-8fa74241fbb3\",\"moduleSequenceNumber\":18060}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  document.getElementById('unclickable').style = \\\"display: block;position: absolute;top: 50%;left: 50%;width: 100px;height: 100px;z-index: 10000;background: red;\\\";\\n  document.getElementById('unclickable').parentNode.addEventListener('click', () => {\\n    document.getElementById('unclickable').style = \\\"display: none; visibility: hidden;\\\";\\n  }, true);\\n}\",\"filename\":\"/manual/exploit/unclickable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/unclickable.js\",\"url\":\"blob:file:///f613c9ce-e070-4a67-a70a-6faa2bdfb6e3\",\"moduleSequenceNumber\":1113}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getDB() {\\n  return new Promise((resolve, reject) => {\\n    if (!window.indexedDB) {\\n      reject(\\\"Indexed DB does not exists\\\");\\n    }\\n    const indexedDbRequest = window.indexedDB.open(\\\"bitburnerSave\\\", 1);\\n\\n    indexedDbRequest.onupgradeneeded = function () {\\n      const db = indexedDbRequest.result;\\n      db.createObjectStore(\\\"savestring\\\");\\n    };\\n\\n    indexedDbRequest.onerror = function (ev) {\\n      reject(`Failed to get IDB ${ev}`);\\n    };\\n\\n    indexedDbRequest.onsuccess = function () {\\n      const db = indexedDbRequest.result;\\n      if (!db) {\\n        reject(\\\"database loadign result was undefined\\\");\\n        return;\\n      }\\n      resolve(db.transaction([\\\"savestring\\\"], \\\"readwrite\\\").objectStore(\\\"savestring\\\"));\\n    };\\n  });\\n}\\n\\nfunction load() {\\n  return new Promise((resolve, reject) => {\\n    getDB()\\n      .then((db) => {\\n        return new Promise((resolve, reject) => {\\n          const request = db.get(\\\"save\\\");\\n          request.onerror = function (ev) {\\n            reject(\\\"Error in Database request to get savestring: \\\" + ev);\\n          };\\n\\n          request.onsuccess = function () {\\n            resolve(request.result);\\n          };\\n        }).then((saveString) => resolve(saveString));\\n      })\\n      .catch((r) => reject(r));\\n  });\\n}\\n\\nfunction save(saveString) {\\n  return getDB().then((db) => {\\n    return new Promise((resolve, reject) => {\\n      const request = db.put(saveString, \\\"save\\\");\\n\\n      request.onerror = function (e) {\\n        reject(\\\"Error saving game to IndexedDB: \\\" + e);\\n      };\\n\\n      request.onsuccess = () => resolve();\\n    });\\n  });\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let saveStr = decodeURIComponent(escape(atob(await load())));\\n    // ns.print(saveStr);\\n\\n    saveStr = saveStr.replace('\\\\\\\\\\\"exploits\\\\\\\\\\\":[', '\\\\\\\\\\\"exploits\\\\\\\\\\\":[\\\\\\\\\\\"EditSaveFile\\\\\\\\\\\",');\\n\\n    saveStr = btoa(unescape(encodeURIComponent(saveStr)));\\n    await save(saveStr);\\n}\",\"filename\":\"/manual/exploit/editSaveFile.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/editSaveFile.js\",\"url\":\"blob:file:///c94968f3-02f7-4fd4-848c-bf52b9f6b107\",\"moduleSequenceNumber\":21028}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.alterReality();\\n}\",\"filename\":\"/manual/exploit/alterReality.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/alterReality.js\",\"url\":\"blob:file:///0cffef17-5a70-43bf-bd9b-58d93ecdf58f\",\"moduleSequenceNumber\":20686}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  Number.prototype.toExponential = function () { return null; };\\n}\",\"filename\":\"/manual/exploit/prototypeTamper.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/prototypeTamper.js\",\"url\":\"blob:file:///06c8fdb2-4877-48ad-8672-7d0ad82854cd\",\"moduleSequenceNumber\":108463}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  window.performance.now = function() {return 0;};\\n}\",\"filename\":\"/manual/exploit/timeCompression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/timeCompression.js\",\"url\":\"blob:file:///b73d88b9-d6fd-4617-b7c9-4e066e023a4d\",\"moduleSequenceNumber\":1114}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.exploit();\\n}\",\"filename\":\"/manual/exploit/undocFuncCall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/undocFuncCall.js\",\"url\":\"blob:file:///77542b48-7415-4f2c-9c2a-92c00899e9f7\",\"moduleSequenceNumber\":108464}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\teval(\\\"ns.bypass(document);\\\");\\n}\",\"filename\":\"/manual/exploit/bypass.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/bypass.js\",\"url\":\"blob:file:///9833afa6-d612-4428-8b6a-9e38762909b4\",\"moduleSequenceNumber\":1068}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {document.achievements.push(\\\"UNACHIEVABLE\\\")}\",\"filename\":\"/manual/exploit/unachievable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/unachievable.js\",\"url\":\"blob:file:///65761e10-d569-4d7d-afb9-7b1e70057ac1\",\"moduleSequenceNumber\":1070}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\nexport async function main(ns) {\\n    var wordlist = [\\\"noodles\\\", \\\"password\\\", \\\"qwerty\\\", \\\"sss\\\", \\\"linkedin\\\", \\\"bitch\\\", \\\"hottie\\\", \\\"zk\\\", \\\"asshole\\\"];\\n\\n    wordlist.forEach(word => {if (ns.rainbow(word)) {ns.tprint(\\\"The word is '\\\" + word)}});\\n    wordlist.forEach(word => ns.rainbow(word));\\n}\",\"filename\":\"/manual/exploit/rainbow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/manual/exploit/rainbow.js\",\"url\":\"blob:file:///48932307-ab6f-4694-9007-51e08202c389\",\"moduleSequenceNumber\":4811}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"filter_list.txt\",\"text\":\"home\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\npserv-15\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\nhome\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\npserv-15\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\nthe-hub\\nnetlink\\navmnite-02h\\nI.I.I.I\\nsummit-uni\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\nomnia\\nunitalife\\nuniv-energy\\nsolaris\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nvitalife\\nomnitek\\n.\\nblade\\npowerhouse-fitness\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"server_list.txt\",\"text\":\"home\\nn00dles\\nfoodnstuff\\nsigma-cosmetics\\njoesguns\\nhong-fang-tea\\nharakiri-sushi\\niron-gym\\npserv-0\\npserv-1\\ndarkweb\\npserv-2\\npserv-3\\npserv-4\\npserv-5\\npserv-6\\npserv-7\\npserv-8\\npserv-9\\npserv-10\\npserv-11\\npserv-12\\npserv-13\\npserv-14\\npserv-15\\nmax-hardware\\nzer0\\nCSEC\\nnectar-net\\nsilver-helix\\nneo-net\\nomega-net\\nphantasy\\ncrush-fitness\\nthe-hub\\nnetlink\\navmnite-02h\\ncomputek\\njohnson-ortho\\nI.I.I.I\\nsummit-uni\\nsyscore\\nrothman-uni\\nzb-institute\\ncatalyst\\nlexo-corp\\nrho-construction\\nalpha-ent\\naevum-police\\nmillenium-fitness\\nglobal-pharm\\ngalactic-cyber\\nsnap-fitness\\naerocorp\\nomnia\\ndeltaone\\nunitalife\\ndefcomm\\nicarus\\nuniv-energy\\nsolaris\\nzeus-med\\nzb-def\\nnova-med\\ninfocomm\\ntaiyang-digital\\napplied-energetics\\nmicrodyne\\nrun4theh111z\\ntitan-labs\\nhelios\\nfulcrumtech\\nstormtech\\nvitalife\\n4sigma\\nkuai-gong\\nomnitek\\n.\\nnwo\\nclarkinc\\nblade\\npowerhouse-fitness\\nb-and-a\\necorp\\nmegacorp\\nThe-Cave\\nfulcrumassets\\nw0r1d_d43m0n\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":19.674,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-129479.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[183,121,103,176,10,21,78,167,196,133,122,67,108,61,186,95,68,110,84,136,194,176,127,200]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63234.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"18.8.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25089233360,\"moneyMax\":125446166800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1143,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"2.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":17789913860,\"moneyMax\":88949569300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35996.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,1,3,0,3,2,3,1,8,2,1,1,3,2,2,2,4,1,5,2],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-256118.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":353195284,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429343-Sector-12.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[131,[2,3,4,7,10,11,12,13,14]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"69.8.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":8992448796.800001,\"moneyMax\":44962243984.00001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-507420.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[77,[4,5,6,8,10,11,12,14]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-317413-Sector-12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,4,3,5,-1,2,10,6,-8,8,-5,9,-4,9,-4,0,9,-2,4,-9,-7,8,1],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"73.2.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":4872648818.8,\"moneyMax\":24363244094,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1031,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320185.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[63,61,75,172,154,180,52,195,145,181,58,128,137,189,100,188,89,112,62,136,143,57,39,144,72,41,38,134,167,165,169,120,103,14,36,72,20,179]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-137062.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,0,0,0,9,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"46.4.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15362013745.2,\"moneyMax\":76810068726,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1217,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-514221.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,4,5,4,6,5,2,4,0,2,1,1,5,3,3,3,2,3,3,3],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411655-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aa())a())(aa()(\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193639-Netburners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))a))())(()(a\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"35.6.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":6639611722.400001,\"moneyMax\":33198058612,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":64}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-715246.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,2,7,3,5,6,2,1,5,1,6,4,6],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-612497-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,9,0,0,5,5,3,0,3,6,3],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"47.2.8.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":7916317654.400001,\"moneyMax\":39581588272,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":932,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464454.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[49,74,104,62]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"41.9.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":8783187623.2,\"moneyMax\":43915938116.00001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1245,\"serverGrowth\":78}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760328.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))))a))(a\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-153427.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":155,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343678.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[5,41,107,61,73,13,82,196,172,32,107,60,30,140,64,192,33],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73754.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[5,7],[2,5],[2,10],[2,4],[0,5],[6,7],[2,8],[5,8],[3,9],[4,7],[1,3],[0,8],[3,5]]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46952.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[10,11],[0,5],[1,4],[7,12],[4,11],[0,1],[0,8],[3,10],[2,5],[3,9],[8,9],[3,6],[4,12],[0,12],[1,6],[1,7],[6,8],[5,9]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"5.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":8799527263.6,\"moneyMax\":43997636318,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1185,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899593-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"91.1.1.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":703091521.2,\"moneyMax\":3515457606,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1038,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789866.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"30189252131\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-679567.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[5,9],[8,4,2],[9,4,4,4],[8,9,6,2,8],[1,1,6,2,6,2],[1,9,5,6,6,6,3],[1,8,2,1,5,4,3,7],[5,3,3,6,4,6,5,6,7],[6,9,1,9,6,2,7,9,2,1],[3,9,2,3,8,5,5,5,6,7,4],[1,4,9,2,3,6,8,1,4,6,5,9]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-442731.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[2,3],[3,10],[4,5],[1,10],[1,11],[11,12],[0,3],[10,12],[3,8],[4,8],[2,4],[6,8],[5,12],[8,12],[3,6],[1,9],[1,5],[2,6],[1,8],[3,9],[4,10]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"46.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1233,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"53.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":445560678.40000004,\"moneyMax\":2227803392,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":934,\"serverGrowth\":87}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-462854-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a))))((\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290460.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[21,45,7,34,30,3,17,1],[50,9,40,17,11,18,29,19],[16,42,30,50,21,49,19,45],[49,15,25,28,22,39,36,50],[4,39,48,5,5,45,37,9],[38,8,35,31,39,6,49,26]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-614095.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"5WU26T852j1940672rk5852I3SI552Y3312ED734phES773BEv491y59\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"45.5.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":358560527.20000005,\"moneyMax\":1792802636.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":69}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63991.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,15,42,13,2,45],[17,36,31,23,44,15],[22,5,2,19,48,11],[42,26,10,43,12,24],[29,40,42,18,17,32],[4,38,39,19,16,31],[47,27,36,11,40,9],[50,20,45,17,11,9],[46,2,32,9,41,46],[37,44,26,44,48,4],[29,37,11,50,35,24],[42,42,1,37,49,45],[27,36,49,6,46,4]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621760.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[70,[2,3,5,8,9,10,12,13]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-326382.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"aaaaaaa0aassVVyyyyy66jjeWWWWpp11Jnuuuuuuu22222222244444PPI8NNNNggggggQU111111111XXTThvvvvvvvvvvvvE\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"78.2.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":307455054.40000004,\"moneyMax\":1537275272.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":72}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-220828.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1111100100001101011111110110110000110011101000100001\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-324042-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,4,8,4,4,-10,-6,-1,-7,-6,-9,9,4,-6,-8,-3,8,-7,-9,-8,-10,-8,-6],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"9.8.2.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":256342817.20000002,\"moneyMax\":1281714086,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":815,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348315.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a)())()(((\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-293006-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9N6MTW5y1Y03A17931v770944GneS849hGnPy61QX05dZMCj311G189tnorf7LMH\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"78.2.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":311330226.8,\"moneyMax\":1556651134,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":847,\"serverGrowth\":63}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-224609.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[125,85,114,172,128,110,97,45,51,130,24,193,154,147,25,56,111,168,185,179,27,75,172,40,197,61,81,151,107,92,129,14,64,193,23,67,51],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"83.2.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":373024343.6,\"moneyMax\":1865121718,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":905,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900626.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,2,2,2,5,4,1,2,4,5,6,6,1,0,6,3,4,2,2,6,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"28.5.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":448237163.6,\"moneyMax\":2241185818,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":888,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-338233.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"847G760tt439y6Xt6tHIf09Q5TD3WtFD09bXcg2CbAi08QgSDOiAj775lYV7Q376JnBr4638\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-21937-NiteSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1941302267,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-908552.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"KKQQmmmmmmmmmmKKOffMBBHyySSqqqqqqqq55AOOOOOOOOOORRtttt0MMtttttttttppVVVVV\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"3.8.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":329931111.6,\"moneyMax\":1649655558.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":800,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501560.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"000dddddccoovvVooq33TTdd2mmLLEEjbbbbbxxlllllllllllllzzil1133644444444444UTTcce\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-475926-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[181,200,26,60,65,152,8,75,157,188,30,102,177,64,192,146,158,80,39,197,170,76,57,11,64,36,40],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17955.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"41.3.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":221425050,\"moneyMax\":1107125250,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":836,\"serverGrowth\":71}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286196-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,29,142,142,106,167,131,130,124,94,68,83,188,200,163,90,118,36,199,132,102,111,163,198,160,56,170,23,169,105,80,194],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-781103-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,28],[20,26],[22,28],[3,9],[9,16],[14,17],[21,31],[22,27],[18,22],[10,15],[13,20]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-874942.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[111,[1,2,4,5,7,8,10,14,15,16,20,21]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"63.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":345764185.6,\"moneyMax\":1728820928,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":945,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-10210.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"LLLLLLLLL4YYuuuuuuuuQGGGGGGGGGGGGGXXddddxxxFFiiiiiiiiNNNNNNNNNNTxxxMMMMMMcccUUUUUUUUUHHHHh00\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897017.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[2,8],[1,5],[6,8],[7,9],[7,9],[0,2],[0,10],[2,4],[2,7],[6,7],[1,9],[7,10],[1,3],[1,2],[0,9],[8,10]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"51.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":310870924,\"moneyMax\":1554354620,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691373.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44,11,5,41,47,19,16,9,47,11,25],[27,10,34,29,45,9,16,4,34,50,36],[9,42,24,10,9,26,12,44,10,39,2]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802925.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"93.4.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":433842706.8,\"moneyMax\":2169213534,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416251.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,-3,-4,1,-7,3,0,-3,-9,-5,5,-3,3,-5,-1,10,10,-1,6,4,3,-9,-3,-1,4,-6,8,-5,0,-2,-1,-5,-4,-6,10,5,8,6,9,0],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688767.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":494791945,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"37.5.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":383515466.8,\"moneyMax\":1917577334,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":874,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245947-TianDiHui.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,10,-2,8,6,-1,4,-6,-3,9,-7,8,-5,8,7,2,2,3,3,5,-6,6,4,-3,4,-6,-6,8,-10,-1,10,-7,7,-2,-1,-4,-5,-10,5,1],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928619-TheBlackHand.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"85518784\",67],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452246.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[113,85,103,128,121,41,166,143,193,61,42,152,116,22,200,200,92,140,92,83],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"81.4.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":437139157.6,\"moneyMax\":2185695788,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130992.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[103,193,128,59,99,142,22,84,180,87,153,133,167,123,135,16,121,69,108,136,118,58,75,196,109,55,195,154,13,1,59,125,55,139,172,193,152,155,133,66,133,72,87,194,82,128,85,22,49],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"32.2.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":286294650.40000004,\"moneyMax\":1431473252.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"93.5.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":310732281.2,\"moneyMax\":1553661406,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":842,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-833061-TianDiHui.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[7,7],[2,8,2],[5,1,1,3]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-40229.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[98,71,89,120],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426817.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":15463622719,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"66.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":532974615.20000005,\"moneyMax\":2664873076.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291822.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,23,20,48,14,36,47],[37,25,23,45,33,5,21],[42,1,19,33,35,3,3],[42,33,1,21,39,46,22],[41,14,27,38,27,21,25],[2,26,33,12,48,41,26],[37,24,32,44,32,22,6],[35,49,16,3,37,16,30],[20,8,7,50,16,41,46]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846112.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"62.5.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":674215310.8000001,\"moneyMax\":3371076554.0000005,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":846,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671173.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"011111110100011111\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247731.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,30,17,38],[6,25,32,50],[47,36,2,40],[23,14,50,46],[26,5,48,5],[15,9,8,35],[20,37,12,25]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"60.4.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":477191327.6,\"moneyMax\":2385956638,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":75}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-694753.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,24],[20,26],[3,5],[7,17],[3,9],[15,18],[1,7],[10,19],[20,22],[22,29],[16,20],[24,30],[16,19],[12,13],[11,17],[8,13]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456866.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01011111101110000110111101001110000000110101000011\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63813.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[9,5],[9,6,8],[1,7,3,3],[1,8,7,2,7],[1,4,1,9,4,1],[2,8,8,4,7,6,7],[6,9,9,9,7,2,9,4],[8,7,8,2,6,6,3,5,8],[1,9,6,9,7,8,6,2,1,8],[1,8,1,6,9,3,9,7,4,7,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"65.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":556362787.6,\"moneyMax\":2781813938,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-527187.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"qq1httCDDDDDDDDDDDDDDZZ445H66hhhhJJJJJJJ66iiiiiiiiiiiB666tXAAWgmmQQQQQQQnn88jX8\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-182743.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"53.2.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":402381378,\"moneyMax\":2011906890,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":820,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997280-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16635.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8dFeoeU7N5431v1971Z7961U1oEA613rsl837txNHH64122pb\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"34.8.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":301273870,\"moneyMax\":1506369350,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":660,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639689.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"xzzzzzzzzzzzzzG00CCnHH2dvBBBBBBBBBBBBBBaaaaaaaaaaaaaa66zzeeeeeeeee44zzv\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"73.3.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[4405947,65,273,260]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14938.362391855628,\"onlineMoneyMade\":4405947,\"onlineRunningTime\":29088.21000007076,\"pid\":98,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///2655ad46-6ba6-43e3-bb3f-7ca1eeff121b\",\"moduleSequenceNumber\":223}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///2655ad46-6ba6-43e3-bb3f-7ca1eeff121b\",\"moduleSequenceNumber\":223}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":202669166.8,\"moneyMax\":1013345834,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":498,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330153-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"22017781226\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"8.4.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":294939554,\"moneyMax\":1474697770,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":598,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390163.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[34,17,41,50,29,8,50],[44,24,6,21,22,25,33],[9,13,45,10,29,41,37],[44,29,23,25,32,50,12],[21,29,22,17,50,11,32],[29,40,35,1,21,34,16],[23,32,32,15,4,30,26],[20,36,20,20,49,17,4],[8,17,42,5,33,28,29],[44,34,16,36,43,42,40],[23,6,5,19,28,13,24],[6,23,24,23,11,31,34]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"85.6.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":80282472,\"moneyMax\":401412360,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":36}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795828-TianDiHui.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0],[0,0,0,1,0,1],[0,1,0,1,0,1],[0,0,0,0,0,1],[0,0,1,1,0,0],[0,0,0,1,1,1],[0,1,1,0,1,0],[0,0,0,1,0,1],[1,0,1,0,0,0],[1,0,1,0,0,1],[0,0,0,0,1,0],[1,0,0,1,1,0]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-992380.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":13730645336,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-53719.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8016\",1],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-165872.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[8,12],[16,21],[6,7],[7,15],[19,27],[1,2],[12,20],[25,28],[7,9],[2,10],[6,10],[4,13],[22,32],[15,17],[17,22],[1,4],[10,12]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"66.2.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1011933,52,260,234]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12962.388530499062,\"onlineMoneyMade\":1011933,\"onlineRunningTime\":29088.21000007076,\"pid\":96,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///198f5002-aac9-470c-900e-fc41c482c124\",\"moduleSequenceNumber\":224}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///198f5002-aac9-470c-900e-fc41c482c124\",\"moduleSequenceNumber\":224}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":482806930,\"moneyMax\":482806930,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-976897.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"4W8Yq749JTbguMGl3663Pd17312749IdKIW1o7N911l852BO29\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"90.2.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":352769477.6,\"moneyMax\":1763847388,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":760,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"76.4.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5602896,234,624,520]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32405.97132624766,\"onlineMoneyMade\":5602896,\"onlineRunningTime\":29088.21000007076,\"pid\":97,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":26,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///68c24777-83d9-4231-bd72-4c7265398092\",\"moduleSequenceNumber\":225}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///68c24777-83d9-4231-bd72-4c7265398092\",\"moduleSequenceNumber\":225}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":122208612,\"moneyMax\":611043060,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":440,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856997.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0001101111001100101101111110110101001111111111101101101001110\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954531.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[143,135,18,4,23,183,47,97,113,18,52,122,136,176,124,117,123,13,165,170,85,130,199,109,187,129,10,4,54,1,118,118,194,141],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-114671.cct\",\"type\":\"Total Ways to Sum\",\"data\":33,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"98.0.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":216483266,\"moneyMax\":1082416330,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":557,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9164-TianDiHui.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"6688kAxx3333Vuuuuuugpprr56666666666zzzxx4UUP666QQ6666MMMMMWWZZeiiiiiiiiiiiiiiRRRRRRRR\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"47.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1204580,91,338,312]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18178.95952448039,\"onlineMoneyMade\":1204580,\"onlineRunningTime\":29088.21000007076,\"pid\":94,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///b1bc56de-36d2-48fa-934a-f0e47709386d\",\"moduleSequenceNumber\":226}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///b1bc56de-36d2-48fa-934a-f0e47709386d\",\"moduleSequenceNumber\":226}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":204670377.60000002,\"moneyMax\":1023351888.0000002,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":438,\"serverGrowth\":52}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"24.5.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[2607006,24,132,132]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7077.026383443202,\"onlineMoneyMade\":2607006,\"onlineRunningTime\":29088.21000007076,\"pid\":92,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///fce91f8c-4e61-44a8-a50c-239d300ae8ef\",\"moduleSequenceNumber\":227}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///fce91f8c-4e61-44a8-a50c-239d300ae8ef\",\"moduleSequenceNumber\":227}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":79556288,\"moneyMax\":397781440,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":308,\"serverGrowth\":52}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"40.9.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":95452773.60000001,\"moneyMax\":477263868,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":331,\"serverGrowth\":49}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-554379.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11986204200\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"13.6.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[11186021,371,1219,1113]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65091.618952871824,\"onlineMoneyMade\":11186021,\"onlineRunningTime\":29088.21000007076,\"pid\":93,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":53,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///96a12614-6fda-4c3c-a4eb-b637945ecace\",\"moduleSequenceNumber\":228}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///96a12614-6fda-4c3c-a4eb-b637945ecace\",\"moduleSequenceNumber\":228}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":110000000,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":405,\"serverGrowth\":65}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-366042.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"zzzzzzzzhhR8JUUUUUUUTTTTTTTTTTTTTvvvvvvvvvvvvbb2222222222EEeeeeeeeeppp\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"41.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":31688576,\"moneyMax\":158442880,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":250,\"serverGrowth\":51}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-295621.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":420484181,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-586882-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[1,23,155,158,38,193,3,196,155,112,54,119,198,14,123,83,66,58,102,188],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"34.8.1.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":28000,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-753934.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"54789864677\",32],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-675948-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,10],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"9.1.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3721962,54,138,114]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7259.423970645346,\"onlineMoneyMade\":3721962,\"onlineRunningTime\":29088.21000007076,\"pid\":52,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///6bd8766b-f247-41b7-8e9d-911ce8b156ca\",\"moduleSequenceNumber\":229}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///6bd8766b-f247-41b7-8e9d-911ce8b156ca\",\"moduleSequenceNumber\":229}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.005999999999994,\"minDifficulty\":3,\"moneyAvailable\":915864.4301537408,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107102.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a()aa)a)())a(()(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688506-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[1,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[1,1,0,0,0,0,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-751486.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"IIIIIIJJJ555555555555555OvvvvvvNNnU66666633bbWccccccLLOOu00LXXMM2222222222222aGGGGGGCf\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"99.0.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[2138214,30,138,138]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7587.739627609208,\"onlineMoneyMade\":2138214,\"onlineRunningTime\":29088.21000007076,\"pid\":53,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///f146e757-7f25-4ce8-afca-95251d5493f4\",\"moduleSequenceNumber\":230}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///f146e757-7f25-4ce8-afca-95251d5493f4\",\"moduleSequenceNumber\":230}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":920000,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685702-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,7],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"90.7.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3884364,60,138,132]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7733.657697370923,\"onlineMoneyMade\":3884364,\"onlineRunningTime\":29088.21000007076,\"pid\":54,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///fedcb5e0-ec4f-434a-a43c-b4d733575d05\",\"moduleSequenceNumber\":231}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///fedcb5e0-ec4f-434a-a43c-b4d733575d05\",\"moduleSequenceNumber\":231}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-941553.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[196,[1,4,5,6,8,10,11,12,13,14,16,19]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-120217.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,2,2,1,3,2,1,1,4,3,5,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"3.3.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5838560,52,299,286]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15570.674027489731,\"onlineMoneyMade\":5838560,\"onlineRunningTime\":29088.21000007076,\"pid\":83,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///89411f5a-ca7e-4608-80ad-748a247906b0\",\"moduleSequenceNumber\":232}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///89411f5a-ca7e-4608-80ad-748a247906b0\",\"moduleSequenceNumber\":232}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3000000,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"3.5.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[6426156,48,126,132]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7295.903488085775,\"onlineMoneyMade\":6426156,\"onlineRunningTime\":29088.21000007076,\"pid\":84,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///44391858-9033-4bd6-9b37-6c454b200174\",\"moduleSequenceNumber\":233}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///44391858-9033-4bd6-9b37-6c454b200174\",\"moduleSequenceNumber\":233}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1100000,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168630.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"80YbiVEiiVQ7CMEoY11BBBBBBkDBBIDBBIDBBLC4kta64646O6O6O6O6O5\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563491-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,11],[18,19],[8,18],[18,27]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-149243.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[26,97,110,77,165,26,59,48,107,138,10,25,188,134,128,84,77,188,200,78,66,143,151,11,114,93,171,191,126,104,192,126,189,104,102,126,18,8],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-811932.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,3],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-878862.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[14,1,65],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"47.2.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[6571500,65,338,299]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17151.45311657498,\"onlineMoneyMade\":6571500,\"onlineRunningTime\":29088.21000007076,\"pid\":88,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///ade64506-1c95-4c3e-92f8-78d62ffaac78\",\"moduleSequenceNumber\":234}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///ade64506-1c95-4c3e-92f8-78d62ffaac78\",\"moduleSequenceNumber\":234}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":12.037999999999899,\"minDifficulty\":8,\"moneyAvailable\":5159598.683003308,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-993540.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":350239508,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"97.2.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[15992184,104,494,572]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28454.02360353453,\"onlineMoneyMade\":15992184,\"onlineRunningTime\":29088.21000007076,\"pid\":87,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a14f9017-131a-4278-9994-372b6b82da4e\",\"moduleSequenceNumber\":235}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a14f9017-131a-4278-9994-372b6b82da4e\",\"moduleSequenceNumber\":235}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":18000000,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-669215.cct\",\"type\":\"Total Ways to Sum\",\"data\":39,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"53.6.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5977614,42,132,120]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6967.587831121915,\"onlineMoneyMade\":5977614,\"onlineRunningTime\":29088.21000007076,\"pid\":55,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///f304c294-3dd3-49cf-8676-9f1c1da5cdd7\",\"moduleSequenceNumber\":236}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///f304c294-3dd3-49cf-8676-9f1c1da5cdd7\",\"moduleSequenceNumber\":236}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1200000,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985121.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())(a)))a())a()\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624324.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,100,171,12,106,159,57,52,44,28,158,110,196,8,115,13,197,135,107,23,12,190,15,157,17,196,98,68,44,176],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495155.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":47473151,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-545616.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[175,135,43,77,177,83,147,44,7,37,146,154,30,24,86,124,141,23,132,187,41,143,87,90,145,43,82,68,107,45,69,107,173,56,81,169],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456157.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"Iq333YwFFFFFFFF44dRNNNNNNNN11KbbTTKKKKKKKKKKKKKKcc7kkggggggggg\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45940.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[10,167,118,148,189,110,39,195,37,99,34,134,33,50,78,138,4,58,143,92,135,128,112,90,190,28,58,59,50,44,42,125,61,40,20,49,132],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"98.5.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[793836,42,150,126]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7733.657697370923,\"onlineMoneyMade\":793836,\"onlineRunningTime\":29088.21000007076,\"pid\":56,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8a8b2ed3-1f33-47d2-9e9f-41fc1a9dc1cf\",\"moduleSequenceNumber\":237}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8a8b2ed3-1f33-47d2-9e9f-41fc1a9dc1cf\",\"moduleSequenceNumber\":237}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1600000,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-680951.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"72168149110\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"26.3.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[152178,26,286,260]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14068.933892858739,\"onlineMoneyMade\":152178,\"onlineRunningTime\":29088.21000007076,\"pid\":89,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a4d49de1-a10d-4974-8356-9dbd31e62599\",\"moduleSequenceNumber\":238}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a4d49de1-a10d-4974-8356-9dbd31e62599\",\"moduleSequenceNumber\":238}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":48000000,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"30.0.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1776151,52,260,273]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14068.933892858739,\"onlineMoneyMade\":1776151,\"onlineRunningTime\":29088.21000007076,\"pid\":86,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///ac24c12a-9e39-4d93-9a43-8de7d0e3e454\",\"moduleSequenceNumber\":239}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///ac24c12a-9e39-4d93-9a43-8de7d0e3e454\",\"moduleSequenceNumber\":239}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759617-TianDiHui.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,9,6,4,3],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-142749-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-6,-8,6,10,0,-3,-6,0,8,-7,0,3,3,7,3,-5,-10,3],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802497.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[9,24]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.5.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[4030819,78,260,273]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14306.050756221526,\"onlineMoneyMade\":4030819,\"onlineRunningTime\":29088.21000007076,\"pid\":90,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a1bece1e-97d8-49ab-9eda-11f5030e511e\",\"moduleSequenceNumber\":240}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a1bece1e-97d8-49ab-9eda-11f5030e511e\",\"moduleSequenceNumber\":240}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":123802206.00000003,\"moneyMax\":123802206.00000003,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":191,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-926316.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[133,47,64,15,68,12,64,20,112,118,98,99,61,185,105,91,139,162,123,101,137,8,96,11,64],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-707603.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[171,168,101,11,146,74,100,23,38,174,120,87,18,26,182,194,123,184,132,96,130,126,192,18,101,169,108,131,62,188,175,69,23,164,39,16,158,130,76,136,79,144,125,53,45,20]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57225.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)(()()())(a)\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"72.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":18412999.2,\"moneyMax\":92064996,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":225,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406786.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,-3,1,-9,-5,5,-5,-3,0,7,-3,3,-9,7,2,-1,-2,6,-10,-1,8,-7],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-908461.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"44.3.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[2256254,39,286,260]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14543.167619584314,\"onlineMoneyMade\":2256254,\"onlineRunningTime\":29088.21000007076,\"pid\":57,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///cc0947ed-b829-4088-8647-10eaf2dc1e38\",\"moduleSequenceNumber\":241}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///cc0947ed-b829-4088-8647-10eaf2dc1e38\",\"moduleSequenceNumber\":241}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":8000000,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415030.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"3hbbeerrMMM2222zzohhQQ577777lp4bbbbbbbbbbb11111111111111JJ2222qqqqqqqqqqqqqnIImmmmmkvccccusssss\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"58.6.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[2973776,104,520,572]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29086.335239168628,\"onlineMoneyMade\":2973776,\"onlineRunningTime\":29088.21000007076,\"pid\":99,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":26,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8745c10d-76e2-41b6-82fb-7e2499585fb2\",\"moduleSequenceNumber\":242}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8745c10d-76e2-41b6-82fb-7e2499585fb2\",\"moduleSequenceNumber\":242}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":100000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":521,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571175.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":7031,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"51.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":360000000,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":975,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"63.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":709,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-758985-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[144,78,118,151,72,125,133],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"89.3.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168637.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,0,3,8,6,5,6,0,0,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"50.8.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[10936444,212,1484,1060]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67669.50485199547,\"onlineMoneyMade\":10936444,\"onlineRunningTime\":29088.21000007076,\"pid\":95,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":53,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8cc464c8-7ade-4746-9ff3-bf5d37d04d4b\",\"moduleSequenceNumber\":243}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8cc464c8-7ade-4746-9ff3-bf5d37d04d4b\",\"moduleSequenceNumber\":243}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721419.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":15,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-877687.cct\",\"type\":\"Total Ways to Sum\",\"data\":48,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594287.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[132,78,189,20,35,53,177,59,32,159,168,147,175,26,129,81,64,41,80,23,6,26,152,32,197,69,127,140,51,8,43,27,106,69,142,66,152,155,32,138],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"54.9.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[11483888,234,572,520]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30825.19223716241,\"onlineMoneyMade\":11483888,\"onlineRunningTime\":29088.21000007076,\"pid\":91,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":26,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///da25f8a1-ad48-4f1b-b435-c050ffee9499\",\"moduleSequenceNumber\":244}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///da25f8a1-ad48-4f1b-b435-c050ffee9499\",\"moduleSequenceNumber\":244}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"63.0.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":514,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"8.5.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1342536,12,57,66]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3319.636087079027,\"onlineMoneyMade\":1342536,\"onlineRunningTime\":29088.21000007076,\"pid\":85,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///d1912d28-3f64-4015-82f0-90f87f1846d7\",\"moduleSequenceNumber\":245}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///d1912d28-3f64-4015-82f0-90f87f1846d7\",\"moduleSequenceNumber\":245}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"15.4.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"3.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":15000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"53.3.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"6.1.2.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[965613860,3412,25590,25590]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1348404.5629897185,\"onlineMoneyMade\":965613860,\"onlineRunningTime\":19186.010000034737,\"pid\":301,\"ramUsage\":2.4,\"server\":\"pserv-1\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///62bfbb8e-5ddf-47be-8c00-cbfa9597a64b\",\"moduleSequenceNumber\":18538}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":18538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"45.3.7.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[11942,3412,25590,23884]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1327659.8774052612,\"onlineMoneyMade\":11942,\"onlineRunningTime\":19186.010000034737,\"pid\":302,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///51fa3937-79fb-4743-ac9f-66bfab15edf5\",\"moduleSequenceNumber\":18541}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":18541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"88.2.7.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[482813754,3412,23884,22178]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1223936.449482975,\"onlineMoneyMade\":482813754,\"onlineRunningTime\":19186.010000034737,\"pid\":303,\"ramUsage\":2.4,\"server\":\"pserv-3\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///c9ea7dfb-c30c-4807-9b2e-cbbbb30345d7\",\"moduleSequenceNumber\":18544}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":18544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"50.5.1.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1448420790,5118,25590,20472]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1244681.1350674322,\"onlineMoneyMade\":1448420790,\"onlineRunningTime\":19186.010000034737,\"pid\":304,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///f457d6e9-ef13-4ba0-90cf-1d25a39c3c1d\",\"moduleSequenceNumber\":18547}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":18547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"9.4.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,22178,20472]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1057978.9648073171,\"onlineMoneyMade\":0,\"onlineRunningTime\":19186.010000034737,\"pid\":305,\"ramUsage\":2.4,\"server\":\"pserv-5\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///483895f2-2011-46bb-94e6-4f16e48df1f5\",\"moduleSequenceNumber\":18550}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":18550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"86.2.4.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[482813367.2299579,3412,18766,17060]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":985372.5652617168,\"onlineMoneyMade\":482813367.2299579,\"onlineRunningTime\":19186.010000034737,\"pid\":306,\"ramUsage\":2.4,\"server\":\"pserv-6\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///b8daad4e-3255-4500-aa29-ac0ab1470dae\",\"moduleSequenceNumber\":18553}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":18553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"82.0.2.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1444389391.3955808,10236,27296,25590]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1493617.362080919,\"onlineMoneyMade\":1444389391.3955808,\"onlineRunningTime\":19186.010000034737,\"pid\":307,\"ramUsage\":2.4,\"server\":\"pserv-7\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///8483aae8-f722-4206-8d7d-900cc8da929d\",\"moduleSequenceNumber\":18556}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":18556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"41.1.7.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5118,3412,29002,25590]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1410638.6197430901,\"onlineMoneyMade\":5118,\"onlineRunningTime\":19186.010000034737,\"pid\":308,\"ramUsage\":2.4,\"server\":\"pserv-8\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///1048b708-f790-482c-926a-dec77aade012\",\"moduleSequenceNumber\":18559}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":18559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"6.9.8.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[482812048,6824,25590,27296]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1431383.3053275472,\"onlineMoneyMade\":482812048,\"onlineRunningTime\":19186.010000034737,\"pid\":309,\"ramUsage\":2.4,\"server\":\"pserv-9\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///9b2b1c77-dc15-4eb7-af76-320a6e5c7ddb\",\"moduleSequenceNumber\":18562}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-9\",\"moduleSequenceNumber\":18562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"55.8.1.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1448436144,8530,27296,27296]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1514362.0476653762,\"onlineMoneyMade\":1448436144,\"onlineRunningTime\":19186.010000034737,\"pid\":310,\"ramUsage\":2.4,\"server\":\"pserv-10\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///5f54a90b-6980-42f1-90e3-5be4d00ff65b\",\"moduleSequenceNumber\":18565}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-10\",\"moduleSequenceNumber\":18565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"12.8.3.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[482806930,6824,27296,20472]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1265425.8206518895,\"onlineMoneyMade\":482806930,\"onlineRunningTime\":19186.010000034737,\"pid\":311,\"ramUsage\":2.4,\"server\":\"pserv-11\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///9f96b305-ee1e-4591-8cee-64ebddfb1e45\",\"moduleSequenceNumber\":18568}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-11\",\"moduleSequenceNumber\":18568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"0.8.9.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[482806930,1706,30708,27296]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1472872.6764964617,\"onlineMoneyMade\":482806930,\"onlineRunningTime\":19186.010000034737,\"pid\":312,\"ramUsage\":2.4,\"server\":\"pserv-12\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///2ff879f8-1099-4633-89db-36f52468753c\",\"moduleSequenceNumber\":18571}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-12\",\"moduleSequenceNumber\":18571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"15.5.8.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[461748156,3412,27296,23884]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1317287.5346130326,\"onlineMoneyMade\":461748156,\"onlineRunningTime\":19186.010000034737,\"pid\":313,\"ramUsage\":2.4,\"server\":\"pserv-13\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///503a0e8a-7668-4adf-819a-caa5f9a424e0\",\"moduleSequenceNumber\":18574}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-13\",\"moduleSequenceNumber\":18574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"87.1.1.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3149.2518862469296,6824,25590,27296]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1358776.905781947,\"onlineMoneyMade\":3149.2518862469296,\"onlineRunningTime\":19186.010000034737,\"pid\":314,\"ramUsage\":2.4,\"server\":\"pserv-14\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///876e6ab3-52b4-4a8b-aa7c-3e86f5ae5b0e\",\"moduleSequenceNumber\":18577}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-14\",\"moduleSequenceNumber\":18577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"95.9.7.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[11942,6824,29002,23884]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1431383.3053275472,\"onlineMoneyMade\":11942,\"onlineRunningTime\":19186.010000034737,\"pid\":315,\"ramUsage\":2.4,\"server\":\"pserv-15\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///30862566-deee-45a3-9836-c97315519e4a\",\"moduleSequenceNumber\":18580}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-15\",\"moduleSequenceNumber\":18580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"37.7.3.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[13648,3412,22178,22178]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1161702.3927296032,\"onlineMoneyMade\":13648,\"onlineRunningTime\":19186.010000034737,\"pid\":316,\"ramUsage\":2.4,\"server\":\"pserv-16\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///ce39134d-36c9-424f-a848-3afb79bfd416\",\"moduleSequenceNumber\":18583}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-16\",\"moduleSequenceNumber\":18583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"77.8.4.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1706,1706,25590,23884]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1255053.4778596608,\"onlineMoneyMade\":1706,\"onlineRunningTime\":19186.010000034737,\"pid\":317,\"ramUsage\":2.4,\"server\":\"pserv-17\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a28eb216-bdf7-4bc5-88bc-c16a8400fbed\",\"moduleSequenceNumber\":18586}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-17\",\"moduleSequenceNumber\":18586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"51.1.6.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5118,1706,23884,23884]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1255053.4778596608,\"onlineMoneyMade\":5118,\"onlineRunningTime\":19186.010000034737,\"pid\":318,\"ramUsage\":2.4,\"server\":\"pserv-18\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///be7f91fe-1415-4e8f-a458-25d6e4e4b05a\",\"moduleSequenceNumber\":18589}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-18\",\"moduleSequenceNumber\":18589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"90.2.5.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,1706,25590,23884]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1223936.449482975,\"onlineMoneyMade\":0,\"onlineRunningTime\":19186.010000034737,\"pid\":319,\"ramUsage\":2.4,\"server\":\"pserv-19\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///ea25bcb4-90bc-4ebf-85b2-e08e33cd39b7\",\"moduleSequenceNumber\":18592}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-19\",\"moduleSequenceNumber\":18592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"34.3.3.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[192288.56120086,6824,22178,22178]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1244681.135067432,\"onlineMoneyMade\":192288.56120086,\"onlineRunningTime\":19186.010000034737,\"pid\":320,\"ramUsage\":2.4,\"server\":\"pserv-20\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a6792e6e-0102-4413-8041-404556cb00c9\",\"moduleSequenceNumber\":18595}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-20\",\"moduleSequenceNumber\":18595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"21.2.1.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,20472,22178]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1089095.9931840028,\"onlineMoneyMade\":0,\"onlineRunningTime\":19186.010000034737,\"pid\":321,\"ramUsage\":2.4,\"server\":\"pserv-21\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///e10498c2-da40-42c5-9343-c1e383769555\",\"moduleSequenceNumber\":18598}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-21\",\"moduleSequenceNumber\":18598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"84.5.2.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5118,1706,22178,20472]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1099468.3359762316,\"onlineMoneyMade\":5118,\"onlineRunningTime\":19186.010000034737,\"pid\":322,\"ramUsage\":2.4,\"server\":\"pserv-22\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///7933fccb-6ba4-49a2-b1e5-8d067acc786e\",\"moduleSequenceNumber\":18601}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-22\",\"moduleSequenceNumber\":18601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"73.8.9.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[1446473690.2476192,8530,25590,20472]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1306915.191820804,\"onlineMoneyMade\":1446473690.2476192,\"onlineRunningTime\":19186.010000034737,\"pid\":323,\"ramUsage\":2.4,\"server\":\"pserv-23\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///84cb374d-eca2-4803-b007-d661b601e8c7\",\"moduleSequenceNumber\":18604}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-23\",\"moduleSequenceNumber\":18604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"46.4.1.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[185397.21074830886,6824,23884,20472]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1213564.1066907463,\"onlineMoneyMade\":185397.21074830886,\"onlineRunningTime\":19186.010000034737,\"pid\":324,\"ramUsage\":2.4,\"server\":\"pserv-24\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///a3830cca-04ef-4522-88c4-e7028511f734\",\"moduleSequenceNumber\":18607}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-24\",\"moduleSequenceNumber\":18607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"22.1.4.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4094.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[11942,6824,25590,22178]},\"filename\":\"/build/exec/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1275798.163444118,\"onlineMoneyMade\":11942,\"onlineRunningTime\":19186.010000034737,\"pid\":325,\"ramUsage\":2.4,\"server\":\"pserv-0\",\"threads\":1706,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS ns} **/\\r\\nexport async function main(ns) {\\r\\n    var target = ns.args[0];\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/build/exec/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/build/exec/hack.js\",\"url\":\"blob:file:///b9cfc875-b1f4-43c7-b3a6-4ae6d4662f42\",\"moduleSequenceNumber\":18609}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":18609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":50341.948298055744}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":11750.3177535311}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":68547.94741528644}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"scan\":\"manual/reddit/scan_v3/scan.js\",\"main\":\"run build/main.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"19","AllGangsSave":"","LastExportBonus":"1659339630536","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}